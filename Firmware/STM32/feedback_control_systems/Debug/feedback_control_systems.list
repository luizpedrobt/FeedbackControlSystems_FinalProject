
feedback_control_systems.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d0  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005668  08005668  00006668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005680  08005680  00007040  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005680  08005680  00006680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005688  08005688  00007040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005688  08005688  00006688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800568c  0800568c  0000668c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000040  20000000  08005690  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000040  080056d0  00007040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080056d0  00007200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109ca  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ca  00000000  00000000  00017a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  0001a208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b8a  00000000  00000000  0001b0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179ee  00000000  00000000  0001bc72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010da1  00000000  00000000  00033660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099fdd  00000000  00000000  00044401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de3de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e64  00000000  00000000  000de424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a6  00000000  00000000  000e2288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000040 	.word	0x20000040
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005650 	.word	0x08005650

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000044 	.word	0x20000044
 80001d4:	08005650 	.word	0x08005650

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	@ 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2uiz>:
 80007a4:	004a      	lsls	r2, r1, #1
 80007a6:	d211      	bcs.n	80007cc <__aeabi_d2uiz+0x28>
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007ac:	d211      	bcs.n	80007d2 <__aeabi_d2uiz+0x2e>
 80007ae:	d50d      	bpl.n	80007cc <__aeabi_d2uiz+0x28>
 80007b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d40e      	bmi.n	80007d8 <__aeabi_d2uiz+0x34>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d102      	bne.n	80007de <__aeabi_d2uiz+0x3a>
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007dc:	4770      	bx	lr
 80007de:	f04f 0000 	mov.w	r0, #0
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_uldivmod>:
 80007e4:	b953      	cbnz	r3, 80007fc <__aeabi_uldivmod+0x18>
 80007e6:	b94a      	cbnz	r2, 80007fc <__aeabi_uldivmod+0x18>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	bf08      	it	eq
 80007ec:	2800      	cmpeq	r0, #0
 80007ee:	bf1c      	itt	ne
 80007f0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80007f4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80007f8:	f000 b988 	b.w	8000b0c <__aeabi_idiv0>
 80007fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000800:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000804:	f000 f806 	bl	8000814 <__udivmoddi4>
 8000808:	f8dd e004 	ldr.w	lr, [sp, #4]
 800080c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr

08000814 <__udivmoddi4>:
 8000814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000818:	9d08      	ldr	r5, [sp, #32]
 800081a:	468e      	mov	lr, r1
 800081c:	4604      	mov	r4, r0
 800081e:	4688      	mov	r8, r1
 8000820:	2b00      	cmp	r3, #0
 8000822:	d14a      	bne.n	80008ba <__udivmoddi4+0xa6>
 8000824:	428a      	cmp	r2, r1
 8000826:	4617      	mov	r7, r2
 8000828:	d962      	bls.n	80008f0 <__udivmoddi4+0xdc>
 800082a:	fab2 f682 	clz	r6, r2
 800082e:	b14e      	cbz	r6, 8000844 <__udivmoddi4+0x30>
 8000830:	f1c6 0320 	rsb	r3, r6, #32
 8000834:	fa01 f806 	lsl.w	r8, r1, r6
 8000838:	fa20 f303 	lsr.w	r3, r0, r3
 800083c:	40b7      	lsls	r7, r6
 800083e:	ea43 0808 	orr.w	r8, r3, r8
 8000842:	40b4      	lsls	r4, r6
 8000844:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000848:	fa1f fc87 	uxth.w	ip, r7
 800084c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000850:	0c23      	lsrs	r3, r4, #16
 8000852:	fb0e 8811 	mls	r8, lr, r1, r8
 8000856:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800085a:	fb01 f20c 	mul.w	r2, r1, ip
 800085e:	429a      	cmp	r2, r3
 8000860:	d909      	bls.n	8000876 <__udivmoddi4+0x62>
 8000862:	18fb      	adds	r3, r7, r3
 8000864:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000868:	f080 80ea 	bcs.w	8000a40 <__udivmoddi4+0x22c>
 800086c:	429a      	cmp	r2, r3
 800086e:	f240 80e7 	bls.w	8000a40 <__udivmoddi4+0x22c>
 8000872:	3902      	subs	r1, #2
 8000874:	443b      	add	r3, r7
 8000876:	1a9a      	subs	r2, r3, r2
 8000878:	b2a3      	uxth	r3, r4
 800087a:	fbb2 f0fe 	udiv	r0, r2, lr
 800087e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000886:	fb00 fc0c 	mul.w	ip, r0, ip
 800088a:	459c      	cmp	ip, r3
 800088c:	d909      	bls.n	80008a2 <__udivmoddi4+0x8e>
 800088e:	18fb      	adds	r3, r7, r3
 8000890:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000894:	f080 80d6 	bcs.w	8000a44 <__udivmoddi4+0x230>
 8000898:	459c      	cmp	ip, r3
 800089a:	f240 80d3 	bls.w	8000a44 <__udivmoddi4+0x230>
 800089e:	443b      	add	r3, r7
 80008a0:	3802      	subs	r0, #2
 80008a2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008a6:	eba3 030c 	sub.w	r3, r3, ip
 80008aa:	2100      	movs	r1, #0
 80008ac:	b11d      	cbz	r5, 80008b6 <__udivmoddi4+0xa2>
 80008ae:	40f3      	lsrs	r3, r6
 80008b0:	2200      	movs	r2, #0
 80008b2:	e9c5 3200 	strd	r3, r2, [r5]
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d905      	bls.n	80008ca <__udivmoddi4+0xb6>
 80008be:	b10d      	cbz	r5, 80008c4 <__udivmoddi4+0xb0>
 80008c0:	e9c5 0100 	strd	r0, r1, [r5]
 80008c4:	2100      	movs	r1, #0
 80008c6:	4608      	mov	r0, r1
 80008c8:	e7f5      	b.n	80008b6 <__udivmoddi4+0xa2>
 80008ca:	fab3 f183 	clz	r1, r3
 80008ce:	2900      	cmp	r1, #0
 80008d0:	d146      	bne.n	8000960 <__udivmoddi4+0x14c>
 80008d2:	4573      	cmp	r3, lr
 80008d4:	d302      	bcc.n	80008dc <__udivmoddi4+0xc8>
 80008d6:	4282      	cmp	r2, r0
 80008d8:	f200 8105 	bhi.w	8000ae6 <__udivmoddi4+0x2d2>
 80008dc:	1a84      	subs	r4, r0, r2
 80008de:	eb6e 0203 	sbc.w	r2, lr, r3
 80008e2:	2001      	movs	r0, #1
 80008e4:	4690      	mov	r8, r2
 80008e6:	2d00      	cmp	r5, #0
 80008e8:	d0e5      	beq.n	80008b6 <__udivmoddi4+0xa2>
 80008ea:	e9c5 4800 	strd	r4, r8, [r5]
 80008ee:	e7e2      	b.n	80008b6 <__udivmoddi4+0xa2>
 80008f0:	2a00      	cmp	r2, #0
 80008f2:	f000 8090 	beq.w	8000a16 <__udivmoddi4+0x202>
 80008f6:	fab2 f682 	clz	r6, r2
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	f040 80a4 	bne.w	8000a48 <__udivmoddi4+0x234>
 8000900:	1a8a      	subs	r2, r1, r2
 8000902:	0c03      	lsrs	r3, r0, #16
 8000904:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000908:	b280      	uxth	r0, r0
 800090a:	b2bc      	uxth	r4, r7
 800090c:	2101      	movs	r1, #1
 800090e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000912:	fb0e 221c 	mls	r2, lr, ip, r2
 8000916:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800091a:	fb04 f20c 	mul.w	r2, r4, ip
 800091e:	429a      	cmp	r2, r3
 8000920:	d907      	bls.n	8000932 <__udivmoddi4+0x11e>
 8000922:	18fb      	adds	r3, r7, r3
 8000924:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000928:	d202      	bcs.n	8000930 <__udivmoddi4+0x11c>
 800092a:	429a      	cmp	r2, r3
 800092c:	f200 80e0 	bhi.w	8000af0 <__udivmoddi4+0x2dc>
 8000930:	46c4      	mov	ip, r8
 8000932:	1a9b      	subs	r3, r3, r2
 8000934:	fbb3 f2fe 	udiv	r2, r3, lr
 8000938:	fb0e 3312 	mls	r3, lr, r2, r3
 800093c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000940:	fb02 f404 	mul.w	r4, r2, r4
 8000944:	429c      	cmp	r4, r3
 8000946:	d907      	bls.n	8000958 <__udivmoddi4+0x144>
 8000948:	18fb      	adds	r3, r7, r3
 800094a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800094e:	d202      	bcs.n	8000956 <__udivmoddi4+0x142>
 8000950:	429c      	cmp	r4, r3
 8000952:	f200 80ca 	bhi.w	8000aea <__udivmoddi4+0x2d6>
 8000956:	4602      	mov	r2, r0
 8000958:	1b1b      	subs	r3, r3, r4
 800095a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800095e:	e7a5      	b.n	80008ac <__udivmoddi4+0x98>
 8000960:	f1c1 0620 	rsb	r6, r1, #32
 8000964:	408b      	lsls	r3, r1
 8000966:	fa22 f706 	lsr.w	r7, r2, r6
 800096a:	431f      	orrs	r7, r3
 800096c:	fa0e f401 	lsl.w	r4, lr, r1
 8000970:	fa20 f306 	lsr.w	r3, r0, r6
 8000974:	fa2e fe06 	lsr.w	lr, lr, r6
 8000978:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800097c:	4323      	orrs	r3, r4
 800097e:	fa00 f801 	lsl.w	r8, r0, r1
 8000982:	fa1f fc87 	uxth.w	ip, r7
 8000986:	fbbe f0f9 	udiv	r0, lr, r9
 800098a:	0c1c      	lsrs	r4, r3, #16
 800098c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000990:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000994:	fb00 fe0c 	mul.w	lr, r0, ip
 8000998:	45a6      	cmp	lr, r4
 800099a:	fa02 f201 	lsl.w	r2, r2, r1
 800099e:	d909      	bls.n	80009b4 <__udivmoddi4+0x1a0>
 80009a0:	193c      	adds	r4, r7, r4
 80009a2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80009a6:	f080 809c 	bcs.w	8000ae2 <__udivmoddi4+0x2ce>
 80009aa:	45a6      	cmp	lr, r4
 80009ac:	f240 8099 	bls.w	8000ae2 <__udivmoddi4+0x2ce>
 80009b0:	3802      	subs	r0, #2
 80009b2:	443c      	add	r4, r7
 80009b4:	eba4 040e 	sub.w	r4, r4, lr
 80009b8:	fa1f fe83 	uxth.w	lr, r3
 80009bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80009c0:	fb09 4413 	mls	r4, r9, r3, r4
 80009c4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80009c8:	fb03 fc0c 	mul.w	ip, r3, ip
 80009cc:	45a4      	cmp	ip, r4
 80009ce:	d908      	bls.n	80009e2 <__udivmoddi4+0x1ce>
 80009d0:	193c      	adds	r4, r7, r4
 80009d2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80009d6:	f080 8082 	bcs.w	8000ade <__udivmoddi4+0x2ca>
 80009da:	45a4      	cmp	ip, r4
 80009dc:	d97f      	bls.n	8000ade <__udivmoddi4+0x2ca>
 80009de:	3b02      	subs	r3, #2
 80009e0:	443c      	add	r4, r7
 80009e2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009e6:	eba4 040c 	sub.w	r4, r4, ip
 80009ea:	fba0 ec02 	umull	lr, ip, r0, r2
 80009ee:	4564      	cmp	r4, ip
 80009f0:	4673      	mov	r3, lr
 80009f2:	46e1      	mov	r9, ip
 80009f4:	d362      	bcc.n	8000abc <__udivmoddi4+0x2a8>
 80009f6:	d05f      	beq.n	8000ab8 <__udivmoddi4+0x2a4>
 80009f8:	b15d      	cbz	r5, 8000a12 <__udivmoddi4+0x1fe>
 80009fa:	ebb8 0203 	subs.w	r2, r8, r3
 80009fe:	eb64 0409 	sbc.w	r4, r4, r9
 8000a02:	fa04 f606 	lsl.w	r6, r4, r6
 8000a06:	fa22 f301 	lsr.w	r3, r2, r1
 8000a0a:	431e      	orrs	r6, r3
 8000a0c:	40cc      	lsrs	r4, r1
 8000a0e:	e9c5 6400 	strd	r6, r4, [r5]
 8000a12:	2100      	movs	r1, #0
 8000a14:	e74f      	b.n	80008b6 <__udivmoddi4+0xa2>
 8000a16:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a1a:	0c01      	lsrs	r1, r0, #16
 8000a1c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a20:	b280      	uxth	r0, r0
 8000a22:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a26:	463b      	mov	r3, r7
 8000a28:	4638      	mov	r0, r7
 8000a2a:	463c      	mov	r4, r7
 8000a2c:	46b8      	mov	r8, r7
 8000a2e:	46be      	mov	lr, r7
 8000a30:	2620      	movs	r6, #32
 8000a32:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a36:	eba2 0208 	sub.w	r2, r2, r8
 8000a3a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a3e:	e766      	b.n	800090e <__udivmoddi4+0xfa>
 8000a40:	4601      	mov	r1, r0
 8000a42:	e718      	b.n	8000876 <__udivmoddi4+0x62>
 8000a44:	4610      	mov	r0, r2
 8000a46:	e72c      	b.n	80008a2 <__udivmoddi4+0x8e>
 8000a48:	f1c6 0220 	rsb	r2, r6, #32
 8000a4c:	fa2e f302 	lsr.w	r3, lr, r2
 8000a50:	40b7      	lsls	r7, r6
 8000a52:	40b1      	lsls	r1, r6
 8000a54:	fa20 f202 	lsr.w	r2, r0, r2
 8000a58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a62:	b2bc      	uxth	r4, r7
 8000a64:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a68:	0c11      	lsrs	r1, r2, #16
 8000a6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a6e:	fb08 f904 	mul.w	r9, r8, r4
 8000a72:	40b0      	lsls	r0, r6
 8000a74:	4589      	cmp	r9, r1
 8000a76:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a7a:	b280      	uxth	r0, r0
 8000a7c:	d93e      	bls.n	8000afc <__udivmoddi4+0x2e8>
 8000a7e:	1879      	adds	r1, r7, r1
 8000a80:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000a84:	d201      	bcs.n	8000a8a <__udivmoddi4+0x276>
 8000a86:	4589      	cmp	r9, r1
 8000a88:	d81f      	bhi.n	8000aca <__udivmoddi4+0x2b6>
 8000a8a:	eba1 0109 	sub.w	r1, r1, r9
 8000a8e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a92:	fb09 f804 	mul.w	r8, r9, r4
 8000a96:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a9a:	b292      	uxth	r2, r2
 8000a9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000aa0:	4542      	cmp	r2, r8
 8000aa2:	d229      	bcs.n	8000af8 <__udivmoddi4+0x2e4>
 8000aa4:	18ba      	adds	r2, r7, r2
 8000aa6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000aaa:	d2c4      	bcs.n	8000a36 <__udivmoddi4+0x222>
 8000aac:	4542      	cmp	r2, r8
 8000aae:	d2c2      	bcs.n	8000a36 <__udivmoddi4+0x222>
 8000ab0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ab4:	443a      	add	r2, r7
 8000ab6:	e7be      	b.n	8000a36 <__udivmoddi4+0x222>
 8000ab8:	45f0      	cmp	r8, lr
 8000aba:	d29d      	bcs.n	80009f8 <__udivmoddi4+0x1e4>
 8000abc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ac0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ac4:	3801      	subs	r0, #1
 8000ac6:	46e1      	mov	r9, ip
 8000ac8:	e796      	b.n	80009f8 <__udivmoddi4+0x1e4>
 8000aca:	eba7 0909 	sub.w	r9, r7, r9
 8000ace:	4449      	add	r1, r9
 8000ad0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ad4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ad8:	fb09 f804 	mul.w	r8, r9, r4
 8000adc:	e7db      	b.n	8000a96 <__udivmoddi4+0x282>
 8000ade:	4673      	mov	r3, lr
 8000ae0:	e77f      	b.n	80009e2 <__udivmoddi4+0x1ce>
 8000ae2:	4650      	mov	r0, sl
 8000ae4:	e766      	b.n	80009b4 <__udivmoddi4+0x1a0>
 8000ae6:	4608      	mov	r0, r1
 8000ae8:	e6fd      	b.n	80008e6 <__udivmoddi4+0xd2>
 8000aea:	443b      	add	r3, r7
 8000aec:	3a02      	subs	r2, #2
 8000aee:	e733      	b.n	8000958 <__udivmoddi4+0x144>
 8000af0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000af4:	443b      	add	r3, r7
 8000af6:	e71c      	b.n	8000932 <__udivmoddi4+0x11e>
 8000af8:	4649      	mov	r1, r9
 8000afa:	e79c      	b.n	8000a36 <__udivmoddi4+0x222>
 8000afc:	eba1 0109 	sub.w	r1, r1, r9
 8000b00:	46c4      	mov	ip, r8
 8000b02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b06:	fb09 f804 	mul.w	r8, r9, r4
 8000b0a:	e7c4      	b.n	8000a96 <__udivmoddi4+0x282>

08000b0c <__aeabi_idiv0>:
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b14:	f000 fc8a 	bl	800142c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b18:	f000 f810 	bl	8000b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1c:	f000 fa42 	bl	8000fa4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b20:	f000 f874 	bl	8000c0c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000b24:	f000 f8c4 	bl	8000cb0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b28:	f000 f978 	bl	8000e1c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000b2c:	f000 fa10 	bl	8000f50 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000b30:	f000 f9c0 	bl	8000eb4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  app_sm_init();
 8000b34:	f004 f9d6 	bl	8004ee4 <app_sm_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <main+0x28>

08000b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b094      	sub	sp, #80	@ 0x50
 8000b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b42:	f107 0320 	add.w	r3, r7, #32
 8000b46:	2230      	movs	r2, #48	@ 0x30
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f004 fd45 	bl	80055da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	4b27      	ldr	r3, [pc, #156]	@ (8000c04 <SystemClock_Config+0xc8>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b68:	4a26      	ldr	r2, [pc, #152]	@ (8000c04 <SystemClock_Config+0xc8>)
 8000b6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b70:	4b24      	ldr	r3, [pc, #144]	@ (8000c04 <SystemClock_Config+0xc8>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	4b21      	ldr	r3, [pc, #132]	@ (8000c08 <SystemClock_Config+0xcc>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a20      	ldr	r2, [pc, #128]	@ (8000c08 <SystemClock_Config+0xcc>)
 8000b86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <SystemClock_Config+0xcc>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba0:	2310      	movs	r3, #16
 8000ba2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bac:	2308      	movs	r3, #8
 8000bae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000bb0:	2364      	movs	r3, #100	@ 0x64
 8000bb2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bb8:	2304      	movs	r3, #4
 8000bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bbc:	f107 0320 	add.w	r3, r7, #32
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f001 fbd9 	bl	8002378 <HAL_RCC_OscConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bcc:	f000 fa2e 	bl	800102c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	2103      	movs	r1, #3
 8000bec:	4618      	mov	r0, r3
 8000bee:	f001 fe3b 	bl	8002868 <HAL_RCC_ClockConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bf8:	f000 fa18 	bl	800102c <Error_Handler>
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	3750      	adds	r7, #80	@ 0x50
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40007000 	.word	0x40007000

08000c0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c12:	463b      	mov	r3, r7
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c20:	4a21      	ldr	r2, [pc, #132]	@ (8000ca8 <MX_ADC1_Init+0x9c>)
 8000c22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c26:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c46:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c4e:	4a17      	ldr	r2, [pc, #92]	@ (8000cac <MX_ADC1_Init+0xa0>)
 8000c50:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c52:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c6c:	480d      	ldr	r0, [pc, #52]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c6e:	f000 fc4f 	bl	8001510 <HAL_ADC_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c78:	f000 f9d8 	bl	800102c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c8e:	f000 fe03 	bl	8001898 <HAL_ADC_ConfigChannel>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c98:	f000 f9c8 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2000005c 	.word	0x2000005c
 8000ca8:	40012000 	.word	0x40012000
 8000cac:	0f000001 	.word	0x0f000001

08000cb0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b096      	sub	sp, #88	@ 0x58
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
 8000cde:	615a      	str	r2, [r3, #20]
 8000ce0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2220      	movs	r2, #32
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f004 fc76 	bl	80055da <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cee:	4b49      	ldr	r3, [pc, #292]	@ (8000e14 <MX_TIM1_Init+0x164>)
 8000cf0:	4a49      	ldr	r2, [pc, #292]	@ (8000e18 <MX_TIM1_Init+0x168>)
 8000cf2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8000cf4:	4b47      	ldr	r3, [pc, #284]	@ (8000e14 <MX_TIM1_Init+0x164>)
 8000cf6:	2263      	movs	r2, #99	@ 0x63
 8000cf8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b46      	ldr	r3, [pc, #280]	@ (8000e14 <MX_TIM1_Init+0x164>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000d00:	4b44      	ldr	r3, [pc, #272]	@ (8000e14 <MX_TIM1_Init+0x164>)
 8000d02:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d08:	4b42      	ldr	r3, [pc, #264]	@ (8000e14 <MX_TIM1_Init+0x164>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d0e:	4b41      	ldr	r3, [pc, #260]	@ (8000e14 <MX_TIM1_Init+0x164>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d14:	4b3f      	ldr	r3, [pc, #252]	@ (8000e14 <MX_TIM1_Init+0x164>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d1a:	483e      	ldr	r0, [pc, #248]	@ (8000e14 <MX_TIM1_Init+0x164>)
 8000d1c:	f001 ff84 	bl	8002c28 <HAL_TIM_Base_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d26:	f000 f981 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d30:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d34:	4619      	mov	r1, r3
 8000d36:	4837      	ldr	r0, [pc, #220]	@ (8000e14 <MX_TIM1_Init+0x164>)
 8000d38:	f002 fbfc 	bl	8003534 <HAL_TIM_ConfigClockSource>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d42:	f000 f973 	bl	800102c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d46:	4833      	ldr	r0, [pc, #204]	@ (8000e14 <MX_TIM1_Init+0x164>)
 8000d48:	f002 f879 	bl	8002e3e <HAL_TIM_PWM_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000d52:	f000 f96b 	bl	800102c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000d56:	482f      	ldr	r0, [pc, #188]	@ (8000e14 <MX_TIM1_Init+0x164>)
 8000d58:	f002 f818 	bl	8002d8c <HAL_TIM_OC_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000d62:	f000 f963 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d72:	4619      	mov	r1, r3
 8000d74:	4827      	ldr	r0, [pc, #156]	@ (8000e14 <MX_TIM1_Init+0x164>)
 8000d76:	f002 ffa5 	bl	8003cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000d80:	f000 f954 	bl	800102c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d84:	2360      	movs	r3, #96	@ 0x60
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d90:	2300      	movs	r3, #0
 8000d92:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da4:	2200      	movs	r2, #0
 8000da6:	4619      	mov	r1, r3
 8000da8:	481a      	ldr	r0, [pc, #104]	@ (8000e14 <MX_TIM1_Init+0x164>)
 8000daa:	f002 fb01 	bl	80033b0 <HAL_TIM_PWM_ConfigChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000db4:	f000 f93a 	bl	800102c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc0:	2208      	movs	r2, #8
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4813      	ldr	r0, [pc, #76]	@ (8000e14 <MX_TIM1_Init+0x164>)
 8000dc6:	f002 fa97 	bl	80032f8 <HAL_TIM_OC_ConfigChannel>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000dd0:	f000 f92c 	bl	800102c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000de8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	4619      	mov	r1, r3
 8000df6:	4807      	ldr	r0, [pc, #28]	@ (8000e14 <MX_TIM1_Init+0x164>)
 8000df8:	f002 ffd2 	bl	8003da0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8000e02:	f000 f913 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e06:	4803      	ldr	r0, [pc, #12]	@ (8000e14 <MX_TIM1_Init+0x164>)
 8000e08:	f000 f9dc 	bl	80011c4 <HAL_TIM_MspPostInit>

}
 8000e0c:	bf00      	nop
 8000e0e:	3758      	adds	r7, #88	@ 0x58
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200000a4 	.word	0x200000a4
 8000e18:	40010000 	.word	0x40010000

08000e1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e30:	463b      	mov	r3, r7
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e38:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb0 <MX_TIM2_Init+0x94>)
 8000e3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49999;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <MX_TIM2_Init+0x94>)
 8000e42:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000e46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e48:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <MX_TIM2_Init+0x94>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000e4e:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <MX_TIM2_Init+0x94>)
 8000e50:	2263      	movs	r2, #99	@ 0x63
 8000e52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e54:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <MX_TIM2_Init+0x94>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5a:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <MX_TIM2_Init+0x94>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e60:	4813      	ldr	r0, [pc, #76]	@ (8000eb0 <MX_TIM2_Init+0x94>)
 8000e62:	f001 fee1 	bl	8002c28 <HAL_TIM_Base_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e6c:	f000 f8de 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <MX_TIM2_Init+0x94>)
 8000e7e:	f002 fb59 	bl	8003534 <HAL_TIM_ConfigClockSource>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e88:	f000 f8d0 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <MX_TIM2_Init+0x94>)
 8000e9a:	f002 ff13 	bl	8003cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ea4:	f000 f8c2 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200000ec 	.word	0x200000ec

08000eb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec8:	463b      	mov	r3, r7
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f48 <MX_TIM3_Init+0x94>)
 8000ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f4c <MX_TIM3_Init+0x98>)
 8000ed4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <MX_TIM3_Init+0x94>)
 8000ed8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000edc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <MX_TIM3_Init+0x94>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000ee4:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <MX_TIM3_Init+0x94>)
 8000ee6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000eea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eec:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <MX_TIM3_Init+0x94>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef2:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <MX_TIM3_Init+0x94>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ef8:	4813      	ldr	r0, [pc, #76]	@ (8000f48 <MX_TIM3_Init+0x94>)
 8000efa:	f001 fe95 	bl	8002c28 <HAL_TIM_Base_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000f04:	f000 f892 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	4619      	mov	r1, r3
 8000f14:	480c      	ldr	r0, [pc, #48]	@ (8000f48 <MX_TIM3_Init+0x94>)
 8000f16:	f002 fb0d 	bl	8003534 <HAL_TIM_ConfigClockSource>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000f20:	f000 f884 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f24:	2300      	movs	r3, #0
 8000f26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <MX_TIM3_Init+0x94>)
 8000f32:	f002 fec7 	bl	8003cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000f3c:	f000 f876 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000134 	.word	0x20000134
 8000f4c:	40000400 	.word	0x40000400

08000f50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f54:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <MX_USART1_UART_Init+0x4c>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	@ (8000fa0 <MX_USART1_UART_Init+0x50>)
 8000f58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f5a:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <MX_USART1_UART_Init+0x4c>)
 8000f5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <MX_USART1_UART_Init+0x4c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <MX_USART1_UART_Init+0x4c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f9c <MX_USART1_UART_Init+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f74:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <MX_USART1_UART_Init+0x4c>)
 8000f76:	220c      	movs	r2, #12
 8000f78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <MX_USART1_UART_Init+0x4c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <MX_USART1_UART_Init+0x4c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f86:	4805      	ldr	r0, [pc, #20]	@ (8000f9c <MX_USART1_UART_Init+0x4c>)
 8000f88:	f002 ff70 	bl	8003e6c <HAL_UART_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f92:	f000 f84b 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000017c 	.word	0x2000017c
 8000fa0:	40011000 	.word	0x40011000

08000fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b1e      	ldr	r3, [pc, #120]	@ (8001028 <MX_GPIO_Init+0x84>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	4a1d      	ldr	r2, [pc, #116]	@ (8001028 <MX_GPIO_Init+0x84>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fba:	4b1b      	ldr	r3, [pc, #108]	@ (8001028 <MX_GPIO_Init+0x84>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	4b17      	ldr	r3, [pc, #92]	@ (8001028 <MX_GPIO_Init+0x84>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a16      	ldr	r2, [pc, #88]	@ (8001028 <MX_GPIO_Init+0x84>)
 8000fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <MX_GPIO_Init+0x84>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <MX_GPIO_Init+0x84>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	4a0f      	ldr	r2, [pc, #60]	@ (8001028 <MX_GPIO_Init+0x84>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <MX_GPIO_Init+0x84>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <MX_GPIO_Init+0x84>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a08      	ldr	r2, [pc, #32]	@ (8001028 <MX_GPIO_Init+0x84>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <MX_GPIO_Init+0x84>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800101a:	bf00      	nop
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <Error_Handler+0x8>

08001038 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b10      	ldr	r3, [pc, #64]	@ (8001084 <HAL_MspInit+0x4c>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001046:	4a0f      	ldr	r2, [pc, #60]	@ (8001084 <HAL_MspInit+0x4c>)
 8001048:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800104c:	6453      	str	r3, [r2, #68]	@ 0x44
 800104e:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <HAL_MspInit+0x4c>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001052:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <HAL_MspInit+0x4c>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	4a08      	ldr	r2, [pc, #32]	@ (8001084 <HAL_MspInit+0x4c>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001068:	6413      	str	r3, [r2, #64]	@ 0x40
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <HAL_MspInit+0x4c>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800

08001088 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	@ 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a17      	ldr	r2, [pc, #92]	@ (8001104 <HAL_ADC_MspInit+0x7c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d127      	bne.n	80010fa <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <HAL_ADC_MspInit+0x80>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	4a15      	ldr	r2, [pc, #84]	@ (8001108 <HAL_ADC_MspInit+0x80>)
 80010b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ba:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <HAL_ADC_MspInit+0x80>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <HAL_ADC_MspInit+0x80>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001108 <HAL_ADC_MspInit+0x80>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <HAL_ADC_MspInit+0x80>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = TEMP_PIN_Pin;
 80010e2:	2302      	movs	r3, #2
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e6:	2303      	movs	r3, #3
 80010e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TEMP_PIN_GPIO_Port, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	@ (800110c <HAL_ADC_MspInit+0x84>)
 80010f6:	f000 ffa1 	bl	800203c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010fa:	bf00      	nop
 80010fc:	3728      	adds	r7, #40	@ 0x28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40012000 	.word	0x40012000
 8001108:	40023800 	.word	0x40023800
 800110c:	40020000 	.word	0x40020000

08001110 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a26      	ldr	r2, [pc, #152]	@ (80011b8 <HAL_TIM_Base_MspInit+0xa8>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d10e      	bne.n	8001140 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	4b25      	ldr	r3, [pc, #148]	@ (80011bc <HAL_TIM_Base_MspInit+0xac>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	4a24      	ldr	r2, [pc, #144]	@ (80011bc <HAL_TIM_Base_MspInit+0xac>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6453      	str	r3, [r2, #68]	@ 0x44
 8001132:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <HAL_TIM_Base_MspInit+0xac>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800113e:	e036      	b.n	80011ae <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001148:	d116      	bne.n	8001178 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	4b1b      	ldr	r3, [pc, #108]	@ (80011bc <HAL_TIM_Base_MspInit+0xac>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	4a1a      	ldr	r2, [pc, #104]	@ (80011bc <HAL_TIM_Base_MspInit+0xac>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6413      	str	r3, [r2, #64]	@ 0x40
 800115a:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <HAL_TIM_Base_MspInit+0xac>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	201c      	movs	r0, #28
 800116c:	f000 fe9d 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001170:	201c      	movs	r0, #28
 8001172:	f000 feb6 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
}
 8001176:	e01a      	b.n	80011ae <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a10      	ldr	r2, [pc, #64]	@ (80011c0 <HAL_TIM_Base_MspInit+0xb0>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d115      	bne.n	80011ae <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <HAL_TIM_Base_MspInit+0xac>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	4a0c      	ldr	r2, [pc, #48]	@ (80011bc <HAL_TIM_Base_MspInit+0xac>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6413      	str	r3, [r2, #64]	@ 0x40
 8001192:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <HAL_TIM_Base_MspInit+0xac>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2101      	movs	r1, #1
 80011a2:	201d      	movs	r0, #29
 80011a4:	f000 fe81 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011a8:	201d      	movs	r0, #29
 80011aa:	f000 fe9a 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40010000 	.word	0x40010000
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40000400 	.word	0x40000400

080011c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a12      	ldr	r2, [pc, #72]	@ (800122c <HAL_TIM_MspPostInit+0x68>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d11e      	bne.n	8001224 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <HAL_TIM_MspPostInit+0x6c>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a10      	ldr	r2, [pc, #64]	@ (8001230 <HAL_TIM_MspPostInit+0x6c>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <HAL_TIM_MspPostInit+0x6c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_LOAD_Pin|PWM_FAN_Pin;
 8001202:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001206:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001214:	2301      	movs	r3, #1
 8001216:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	4619      	mov	r1, r3
 800121e:	4805      	ldr	r0, [pc, #20]	@ (8001234 <HAL_TIM_MspPostInit+0x70>)
 8001220:	f000 ff0c 	bl	800203c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001224:	bf00      	nop
 8001226:	3720      	adds	r7, #32
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40010000 	.word	0x40010000
 8001230:	40023800 	.word	0x40023800
 8001234:	40020000 	.word	0x40020000

08001238 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	@ 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a2c      	ldr	r2, [pc, #176]	@ (8001308 <HAL_UART_MspInit+0xd0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d152      	bne.n	8001300 <HAL_UART_MspInit+0xc8>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b2b      	ldr	r3, [pc, #172]	@ (800130c <HAL_UART_MspInit+0xd4>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001262:	4a2a      	ldr	r2, [pc, #168]	@ (800130c <HAL_UART_MspInit+0xd4>)
 8001264:	f043 0310 	orr.w	r3, r3, #16
 8001268:	6453      	str	r3, [r2, #68]	@ 0x44
 800126a:	4b28      	ldr	r3, [pc, #160]	@ (800130c <HAL_UART_MspInit+0xd4>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126e:	f003 0310 	and.w	r3, r3, #16
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b24      	ldr	r3, [pc, #144]	@ (800130c <HAL_UART_MspInit+0xd4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a23      	ldr	r2, [pc, #140]	@ (800130c <HAL_UART_MspInit+0xd4>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b21      	ldr	r3, [pc, #132]	@ (800130c <HAL_UART_MspInit+0xd4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	4b1d      	ldr	r3, [pc, #116]	@ (800130c <HAL_UART_MspInit+0xd4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a1c      	ldr	r2, [pc, #112]	@ (800130c <HAL_UART_MspInit+0xd4>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <HAL_UART_MspInit+0xd4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012c0:	2307      	movs	r3, #7
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	4811      	ldr	r0, [pc, #68]	@ (8001310 <HAL_UART_MspInit+0xd8>)
 80012cc:	f000 feb6 	bl	800203c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012d0:	2308      	movs	r3, #8
 80012d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012e0:	2307      	movs	r3, #7
 80012e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	480a      	ldr	r0, [pc, #40]	@ (8001314 <HAL_UART_MspInit+0xdc>)
 80012ec:	f000 fea6 	bl	800203c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	2025      	movs	r0, #37	@ 0x25
 80012f6:	f000 fdd8 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012fa:	2025      	movs	r0, #37	@ 0x25
 80012fc:	f000 fdf1 	bl	8001ee2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	@ 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40011000 	.word	0x40011000
 800130c:	40023800 	.word	0x40023800
 8001310:	40020000 	.word	0x40020000
 8001314:	40020400 	.word	0x40020400

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <NMI_Handler+0x4>

08001320 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <MemManage_Handler+0x4>

08001330 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <BusFault_Handler+0x4>

08001338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <UsageFault_Handler+0x4>

08001340 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136e:	f000 f8af 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800137c:	4802      	ldr	r0, [pc, #8]	@ (8001388 <TIM2_IRQHandler+0x10>)
 800137e:	f001 fecb 	bl	8003118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200000ec 	.word	0x200000ec

0800138c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001390:	4802      	ldr	r0, [pc, #8]	@ (800139c <TIM3_IRQHandler+0x10>)
 8001392:	f001 fec1 	bl	8003118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000134 	.word	0x20000134

080013a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013a4:	4802      	ldr	r0, [pc, #8]	@ (80013b0 <USART1_IRQHandler+0x10>)
 80013a6:	f002 fe0d 	bl	8003fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000017c 	.word	0x2000017c

080013b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <SystemInit+0x20>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013be:	4a05      	ldr	r2, [pc, #20]	@ (80013d4 <SystemInit+0x20>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001410 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013dc:	f7ff ffea 	bl	80013b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e0:	480c      	ldr	r0, [pc, #48]	@ (8001414 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013e2:	490d      	ldr	r1, [pc, #52]	@ (8001418 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e4:	4a0d      	ldr	r2, [pc, #52]	@ (800141c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e8:	e002      	b.n	80013f0 <LoopCopyDataInit>

080013ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ee:	3304      	adds	r3, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f4:	d3f9      	bcc.n	80013ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001420 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001424 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013fc:	e001      	b.n	8001402 <LoopFillZerobss>

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001400:	3204      	adds	r2, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001406:	f004 f8f1 	bl	80055ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140a:	f7ff fb81 	bl	8000b10 <main>
  bx  lr    
 800140e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001410:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001418:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 800141c:	08005690 	.word	0x08005690
  ldr r2, =_sbss
 8001420:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001424:	20000200 	.word	0x20000200

08001428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001428:	e7fe      	b.n	8001428 <ADC_IRQHandler>
	...

0800142c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001430:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <HAL_Init+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0d      	ldr	r2, [pc, #52]	@ (800146c <HAL_Init+0x40>)
 8001436:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800143a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800143c:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <HAL_Init+0x40>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0a      	ldr	r2, [pc, #40]	@ (800146c <HAL_Init+0x40>)
 8001442:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001446:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <HAL_Init+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a07      	ldr	r2, [pc, #28]	@ (800146c <HAL_Init+0x40>)
 800144e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001452:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001454:	2003      	movs	r0, #3
 8001456:	f000 fd1d 	bl	8001e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145a:	200f      	movs	r0, #15
 800145c:	f000 f808 	bl	8001470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001460:	f7ff fdea 	bl	8001038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40023c00 	.word	0x40023c00

08001470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <HAL_InitTick+0x54>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b12      	ldr	r3, [pc, #72]	@ (80014c8 <HAL_InitTick+0x58>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001486:	fbb3 f3f1 	udiv	r3, r3, r1
 800148a:	fbb2 f3f3 	udiv	r3, r2, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f000 fd35 	bl	8001efe <HAL_SYSTICK_Config>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e00e      	b.n	80014bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d80a      	bhi.n	80014ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a4:	2200      	movs	r2, #0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014ac:	f000 fcfd 	bl	8001eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b0:	4a06      	ldr	r2, [pc, #24]	@ (80014cc <HAL_InitTick+0x5c>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e000      	b.n	80014bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000000 	.word	0x20000000
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20000004 	.word	0x20000004

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000008 	.word	0x20000008
 80014f4:	200001c4 	.word	0x200001c4

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	@ (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	200001c4 	.word	0x200001c4

08001510 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e033      	b.n	800158e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	2b00      	cmp	r3, #0
 800152c:	d109      	bne.n	8001542 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fdaa 	bl	8001088 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	f003 0310 	and.w	r3, r3, #16
 800154a:	2b00      	cmp	r3, #0
 800154c:	d118      	bne.n	8001580 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001552:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001556:	f023 0302 	bic.w	r3, r3, #2
 800155a:	f043 0202 	orr.w	r2, r3, #2
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 faca 	bl	8001afc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	f023 0303 	bic.w	r3, r3, #3
 8001576:	f043 0201 	orr.w	r2, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	641a      	str	r2, [r3, #64]	@ 0x40
 800157e:	e001      	b.n	8001584 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d101      	bne.n	80015b2 <HAL_ADC_Start+0x1a>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e097      	b.n	80016e2 <HAL_ADC_Start+0x14a>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d018      	beq.n	80015fa <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0201 	orr.w	r2, r2, #1
 80015d6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015d8:	4b45      	ldr	r3, [pc, #276]	@ (80016f0 <HAL_ADC_Start+0x158>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a45      	ldr	r2, [pc, #276]	@ (80016f4 <HAL_ADC_Start+0x15c>)
 80015de:	fba2 2303 	umull	r2, r3, r2, r3
 80015e2:	0c9a      	lsrs	r2, r3, #18
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80015ec:	e002      	b.n	80015f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f9      	bne.n	80015ee <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b01      	cmp	r3, #1
 8001606:	d15f      	bne.n	80016c8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001610:	f023 0301 	bic.w	r3, r3, #1
 8001614:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001626:	2b00      	cmp	r3, #0
 8001628:	d007      	beq.n	800163a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001632:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001646:	d106      	bne.n	8001656 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164c:	f023 0206 	bic.w	r2, r3, #6
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	645a      	str	r2, [r3, #68]	@ 0x44
 8001654:	e002      	b.n	800165c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001664:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <HAL_ADC_Start+0x160>)
 8001666:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001670:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10f      	bne.n	800169e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d129      	bne.n	80016e0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	e020      	b.n	80016e0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a16      	ldr	r2, [pc, #88]	@ (80016fc <HAL_ADC_Start+0x164>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d11b      	bne.n	80016e0 <HAL_ADC_Start+0x148>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d114      	bne.n	80016e0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	e00b      	b.n	80016e0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016cc:	f043 0210 	orr.w	r2, r3, #16
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d8:	f043 0201 	orr.w	r2, r3, #1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000000 	.word	0x20000000
 80016f4:	431bde83 	.word	0x431bde83
 80016f8:	40012300 	.word	0x40012300
 80016fc:	40012000 	.word	0x40012000

08001700 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <HAL_ADC_Stop+0x16>
 8001712:	2302      	movs	r3, #2
 8001714:	e021      	b.n	800175a <HAL_ADC_Stop+0x5a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0201 	bic.w	r2, r2, #1
 800172c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b00      	cmp	r3, #0
 800173a:	d109      	bne.n	8001750 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001744:	f023 0301 	bic.w	r3, r3, #1
 8001748:	f043 0201 	orr.w	r2, r3, #1
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800177e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001782:	d113      	bne.n	80017ac <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800178e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001792:	d10b      	bne.n	80017ac <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	f043 0220 	orr.w	r2, r3, #32
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e063      	b.n	8001874 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80017ac:	f7ff fea4 	bl	80014f8 <HAL_GetTick>
 80017b0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017b2:	e021      	b.n	80017f8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017ba:	d01d      	beq.n	80017f8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d007      	beq.n	80017d2 <HAL_ADC_PollForConversion+0x6c>
 80017c2:	f7ff fe99 	bl	80014f8 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d212      	bcs.n	80017f8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d00b      	beq.n	80017f8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e4:	f043 0204 	orr.w	r2, r3, #4
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e03d      	b.n	8001874 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b02      	cmp	r3, #2
 8001804:	d1d6      	bne.n	80017b4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f06f 0212 	mvn.w	r2, #18
 800180e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d123      	bne.n	8001872 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800182e:	2b00      	cmp	r3, #0
 8001830:	d11f      	bne.n	8001872 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001838:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800183c:	2b00      	cmp	r3, #0
 800183e:	d006      	beq.n	800184e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800184a:	2b00      	cmp	r3, #0
 800184c:	d111      	bne.n	8001872 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d105      	bne.n	8001872 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	f043 0201 	orr.w	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x1c>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e113      	b.n	8001adc <HAL_ADC_ConfigChannel+0x244>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b09      	cmp	r3, #9
 80018c2:	d925      	bls.n	8001910 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68d9      	ldr	r1, [r3, #12]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	3b1e      	subs	r3, #30
 80018da:	2207      	movs	r2, #7
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43da      	mvns	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	400a      	ands	r2, r1
 80018e8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68d9      	ldr	r1, [r3, #12]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	4603      	mov	r3, r0
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4403      	add	r3, r0
 8001902:	3b1e      	subs	r3, #30
 8001904:	409a      	lsls	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	e022      	b.n	8001956 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6919      	ldr	r1, [r3, #16]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	b29b      	uxth	r3, r3
 800191c:	461a      	mov	r2, r3
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	2207      	movs	r2, #7
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	400a      	ands	r2, r1
 8001932:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6919      	ldr	r1, [r3, #16]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	4618      	mov	r0, r3
 8001946:	4603      	mov	r3, r0
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4403      	add	r3, r0
 800194c:	409a      	lsls	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b06      	cmp	r3, #6
 800195c:	d824      	bhi.n	80019a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	3b05      	subs	r3, #5
 8001970:	221f      	movs	r2, #31
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	400a      	ands	r2, r1
 800197e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	4618      	mov	r0, r3
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	3b05      	subs	r3, #5
 800199a:	fa00 f203 	lsl.w	r2, r0, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80019a6:	e04c      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b0c      	cmp	r3, #12
 80019ae:	d824      	bhi.n	80019fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	3b23      	subs	r3, #35	@ 0x23
 80019c2:	221f      	movs	r2, #31
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43da      	mvns	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	400a      	ands	r2, r1
 80019d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	3b23      	subs	r3, #35	@ 0x23
 80019ec:	fa00 f203 	lsl.w	r2, r0, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80019f8:	e023      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	3b41      	subs	r3, #65	@ 0x41
 8001a0c:	221f      	movs	r2, #31
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	400a      	ands	r2, r1
 8001a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	3b41      	subs	r3, #65	@ 0x41
 8001a36:	fa00 f203 	lsl.w	r2, r0, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a42:	4b29      	ldr	r3, [pc, #164]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x250>)
 8001a44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a28      	ldr	r2, [pc, #160]	@ (8001aec <HAL_ADC_ConfigChannel+0x254>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d10f      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x1d8>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b12      	cmp	r3, #18
 8001a56:	d10b      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1d      	ldr	r2, [pc, #116]	@ (8001aec <HAL_ADC_ConfigChannel+0x254>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d12b      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x23a>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001af0 <HAL_ADC_ConfigChannel+0x258>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d003      	beq.n	8001a8c <HAL_ADC_ConfigChannel+0x1f4>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b11      	cmp	r3, #17
 8001a8a:	d122      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a11      	ldr	r2, [pc, #68]	@ (8001af0 <HAL_ADC_ConfigChannel+0x258>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d111      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001aae:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <HAL_ADC_ConfigChannel+0x25c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a11      	ldr	r2, [pc, #68]	@ (8001af8 <HAL_ADC_ConfigChannel+0x260>)
 8001ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab8:	0c9a      	lsrs	r2, r3, #18
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ac4:	e002      	b.n	8001acc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f9      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	40012300 	.word	0x40012300
 8001aec:	40012000 	.word	0x40012000
 8001af0:	10000012 	.word	0x10000012
 8001af4:	20000000 	.word	0x20000000
 8001af8:	431bde83 	.word	0x431bde83

08001afc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b04:	4b79      	ldr	r3, [pc, #484]	@ (8001cec <ADC_Init+0x1f0>)
 8001b06:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6859      	ldr	r1, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	021a      	lsls	r2, r3, #8
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6859      	ldr	r1, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6899      	ldr	r1, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8e:	4a58      	ldr	r2, [pc, #352]	@ (8001cf0 <ADC_Init+0x1f4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d022      	beq.n	8001bda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ba2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6899      	ldr	r1, [r3, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6899      	ldr	r1, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	e00f      	b.n	8001bfa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001be8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bf8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0202 	bic.w	r2, r2, #2
 8001c08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6899      	ldr	r1, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7e1b      	ldrb	r3, [r3, #24]
 8001c14:	005a      	lsls	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d01b      	beq.n	8001c60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c36:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6859      	ldr	r1, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c52:	3b01      	subs	r3, #1
 8001c54:	035a      	lsls	r2, r3, #13
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	e007      	b.n	8001c70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c6e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	051a      	lsls	r2, r3, #20
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ca4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6899      	ldr	r1, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001cb2:	025a      	lsls	r2, r3, #9
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6899      	ldr	r1, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	029a      	lsls	r2, r3, #10
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	609a      	str	r2, [r3, #8]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	40012300 	.word	0x40012300
 8001cf0:	0f000001 	.word	0x0f000001

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	@ (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	@ (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db0b      	blt.n	8001d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	4907      	ldr	r1, [pc, #28]	@ (8001d90 <__NVIC_EnableIRQ+0x38>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2001      	movs	r0, #1
 8001d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000e100 	.word	0xe000e100

08001d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	db0a      	blt.n	8001dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	490c      	ldr	r1, [pc, #48]	@ (8001de0 <__NVIC_SetPriority+0x4c>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	0112      	lsls	r2, r2, #4
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	440b      	add	r3, r1
 8001db8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dbc:	e00a      	b.n	8001dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4908      	ldr	r1, [pc, #32]	@ (8001de4 <__NVIC_SetPriority+0x50>)
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	3b04      	subs	r3, #4
 8001dcc:	0112      	lsls	r2, r2, #4
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	761a      	strb	r2, [r3, #24]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000e100 	.word	0xe000e100
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	@ 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f1c3 0307 	rsb	r3, r3, #7
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	bf28      	it	cs
 8001e06:	2304      	movcs	r3, #4
 8001e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d902      	bls.n	8001e18 <NVIC_EncodePriority+0x30>
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3b03      	subs	r3, #3
 8001e16:	e000      	b.n	8001e1a <NVIC_EncodePriority+0x32>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43da      	mvns	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	43d9      	mvns	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	4313      	orrs	r3, r2
         );
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3724      	adds	r7, #36	@ 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e60:	d301      	bcc.n	8001e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00f      	b.n	8001e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e66:	4a0a      	ldr	r2, [pc, #40]	@ (8001e90 <SysTick_Config+0x40>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6e:	210f      	movs	r1, #15
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e74:	f7ff ff8e 	bl	8001d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e78:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <SysTick_Config+0x40>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7e:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <SysTick_Config+0x40>)
 8001e80:	2207      	movs	r2, #7
 8001e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	e000e010 	.word	0xe000e010

08001e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff29 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ebc:	f7ff ff3e 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	6978      	ldr	r0, [r7, #20]
 8001ec8:	f7ff ff8e 	bl	8001de8 <NVIC_EncodePriority>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff5d 	bl	8001d94 <__NVIC_SetPriority>
}
 8001eda:	bf00      	nop
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff31 	bl	8001d58 <__NVIC_EnableIRQ>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffa2 	bl	8001e50 <SysTick_Config>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b084      	sub	sp, #16
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f22:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f24:	f7ff fae8 	bl	80014f8 <HAL_GetTick>
 8001f28:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d008      	beq.n	8001f48 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2280      	movs	r2, #128	@ 0x80
 8001f3a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e052      	b.n	8001fee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0216 	bic.w	r2, r2, #22
 8001f56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695a      	ldr	r2, [r3, #20]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f66:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d103      	bne.n	8001f78 <HAL_DMA_Abort+0x62>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d007      	beq.n	8001f88 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0208 	bic.w	r2, r2, #8
 8001f86:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f98:	e013      	b.n	8001fc2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f9a:	f7ff faad 	bl	80014f8 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b05      	cmp	r3, #5
 8001fa6:	d90c      	bls.n	8001fc2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2220      	movs	r2, #32
 8001fac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e015      	b.n	8001fee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1e4      	bne.n	8001f9a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd4:	223f      	movs	r2, #63	@ 0x3f
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d004      	beq.n	8002014 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2280      	movs	r2, #128	@ 0x80
 800200e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e00c      	b.n	800202e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2205      	movs	r2, #5
 8002018:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0201 	bic.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800203c:	b480      	push	{r7}
 800203e:	b089      	sub	sp, #36	@ 0x24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	e159      	b.n	800230c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002058:	2201      	movs	r2, #1
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	429a      	cmp	r2, r3
 8002072:	f040 8148 	bne.w	8002306 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b01      	cmp	r3, #1
 8002080:	d005      	beq.n	800208e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208a:	2b02      	cmp	r3, #2
 800208c:	d130      	bne.n	80020f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	2203      	movs	r2, #3
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c4:	2201      	movs	r2, #1
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	f003 0201 	and.w	r2, r3, #1
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d017      	beq.n	800212c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2203      	movs	r2, #3
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d123      	bne.n	8002180 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	08da      	lsrs	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3208      	adds	r2, #8
 8002140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	220f      	movs	r2, #15
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	08da      	lsrs	r2, r3, #3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3208      	adds	r2, #8
 800217a:	69b9      	ldr	r1, [r7, #24]
 800217c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	2203      	movs	r2, #3
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0203 	and.w	r2, r3, #3
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80a2 	beq.w	8002306 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	4b57      	ldr	r3, [pc, #348]	@ (8002324 <HAL_GPIO_Init+0x2e8>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ca:	4a56      	ldr	r2, [pc, #344]	@ (8002324 <HAL_GPIO_Init+0x2e8>)
 80021cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021d2:	4b54      	ldr	r3, [pc, #336]	@ (8002324 <HAL_GPIO_Init+0x2e8>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021de:	4a52      	ldr	r2, [pc, #328]	@ (8002328 <HAL_GPIO_Init+0x2ec>)
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	089b      	lsrs	r3, r3, #2
 80021e4:	3302      	adds	r3, #2
 80021e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	220f      	movs	r2, #15
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a49      	ldr	r2, [pc, #292]	@ (800232c <HAL_GPIO_Init+0x2f0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d019      	beq.n	800223e <HAL_GPIO_Init+0x202>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a48      	ldr	r2, [pc, #288]	@ (8002330 <HAL_GPIO_Init+0x2f4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d013      	beq.n	800223a <HAL_GPIO_Init+0x1fe>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a47      	ldr	r2, [pc, #284]	@ (8002334 <HAL_GPIO_Init+0x2f8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00d      	beq.n	8002236 <HAL_GPIO_Init+0x1fa>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a46      	ldr	r2, [pc, #280]	@ (8002338 <HAL_GPIO_Init+0x2fc>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d007      	beq.n	8002232 <HAL_GPIO_Init+0x1f6>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a45      	ldr	r2, [pc, #276]	@ (800233c <HAL_GPIO_Init+0x300>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d101      	bne.n	800222e <HAL_GPIO_Init+0x1f2>
 800222a:	2304      	movs	r3, #4
 800222c:	e008      	b.n	8002240 <HAL_GPIO_Init+0x204>
 800222e:	2307      	movs	r3, #7
 8002230:	e006      	b.n	8002240 <HAL_GPIO_Init+0x204>
 8002232:	2303      	movs	r3, #3
 8002234:	e004      	b.n	8002240 <HAL_GPIO_Init+0x204>
 8002236:	2302      	movs	r3, #2
 8002238:	e002      	b.n	8002240 <HAL_GPIO_Init+0x204>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_GPIO_Init+0x204>
 800223e:	2300      	movs	r3, #0
 8002240:	69fa      	ldr	r2, [r7, #28]
 8002242:	f002 0203 	and.w	r2, r2, #3
 8002246:	0092      	lsls	r2, r2, #2
 8002248:	4093      	lsls	r3, r2
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002250:	4935      	ldr	r1, [pc, #212]	@ (8002328 <HAL_GPIO_Init+0x2ec>)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	3302      	adds	r3, #2
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800225e:	4b38      	ldr	r3, [pc, #224]	@ (8002340 <HAL_GPIO_Init+0x304>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002282:	4a2f      	ldr	r2, [pc, #188]	@ (8002340 <HAL_GPIO_Init+0x304>)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002288:	4b2d      	ldr	r3, [pc, #180]	@ (8002340 <HAL_GPIO_Init+0x304>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022ac:	4a24      	ldr	r2, [pc, #144]	@ (8002340 <HAL_GPIO_Init+0x304>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022b2:	4b23      	ldr	r3, [pc, #140]	@ (8002340 <HAL_GPIO_Init+0x304>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002340 <HAL_GPIO_Init+0x304>)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022dc:	4b18      	ldr	r3, [pc, #96]	@ (8002340 <HAL_GPIO_Init+0x304>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002300:	4a0f      	ldr	r2, [pc, #60]	@ (8002340 <HAL_GPIO_Init+0x304>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3301      	adds	r3, #1
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	2b0f      	cmp	r3, #15
 8002310:	f67f aea2 	bls.w	8002058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3724      	adds	r7, #36	@ 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	40013800 	.word	0x40013800
 800232c:	40020000 	.word	0x40020000
 8002330:	40020400 	.word	0x40020400
 8002334:	40020800 	.word	0x40020800
 8002338:	40020c00 	.word	0x40020c00
 800233c:	40021000 	.word	0x40021000
 8002340:	40013c00 	.word	0x40013c00

08002344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	807b      	strh	r3, [r7, #2]
 8002350:	4613      	mov	r3, r2
 8002352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002354:	787b      	ldrb	r3, [r7, #1]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800235a:	887a      	ldrh	r2, [r7, #2]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002360:	e003      	b.n	800236a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002362:	887b      	ldrh	r3, [r7, #2]
 8002364:	041a      	lsls	r2, r3, #16
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	619a      	str	r2, [r3, #24]
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e267      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d075      	beq.n	8002482 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002396:	4b88      	ldr	r3, [pc, #544]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d00c      	beq.n	80023bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a2:	4b85      	ldr	r3, [pc, #532]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d112      	bne.n	80023d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ae:	4b82      	ldr	r3, [pc, #520]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023ba:	d10b      	bne.n	80023d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023bc:	4b7e      	ldr	r3, [pc, #504]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d05b      	beq.n	8002480 <HAL_RCC_OscConfig+0x108>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d157      	bne.n	8002480 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e242      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023dc:	d106      	bne.n	80023ec <HAL_RCC_OscConfig+0x74>
 80023de:	4b76      	ldr	r3, [pc, #472]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a75      	ldr	r2, [pc, #468]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e01d      	b.n	8002428 <HAL_RCC_OscConfig+0xb0>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0x98>
 80023f6:	4b70      	ldr	r3, [pc, #448]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a6f      	ldr	r2, [pc, #444]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b6d      	ldr	r3, [pc, #436]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a6c      	ldr	r2, [pc, #432]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0xb0>
 8002410:	4b69      	ldr	r3, [pc, #420]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a68      	ldr	r2, [pc, #416]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002416:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	4b66      	ldr	r3, [pc, #408]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a65      	ldr	r2, [pc, #404]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002422:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d013      	beq.n	8002458 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7ff f862 	bl	80014f8 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002438:	f7ff f85e 	bl	80014f8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	@ 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e207      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	4b5b      	ldr	r3, [pc, #364]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0xc0>
 8002456:	e014      	b.n	8002482 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7ff f84e 	bl	80014f8 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002460:	f7ff f84a 	bl	80014f8 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	@ 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e1f3      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002472:	4b51      	ldr	r3, [pc, #324]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0xe8>
 800247e:	e000      	b.n	8002482 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d063      	beq.n	8002556 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800248e:	4b4a      	ldr	r3, [pc, #296]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00b      	beq.n	80024b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800249a:	4b47      	ldr	r3, [pc, #284]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d11c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024a6:	4b44      	ldr	r3, [pc, #272]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d116      	bne.n	80024e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b2:	4b41      	ldr	r3, [pc, #260]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_RCC_OscConfig+0x152>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e1c7      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ca:	4b3b      	ldr	r3, [pc, #236]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4937      	ldr	r1, [pc, #220]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024de:	e03a      	b.n	8002556 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d020      	beq.n	800252a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e8:	4b34      	ldr	r3, [pc, #208]	@ (80025bc <HAL_RCC_OscConfig+0x244>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ee:	f7ff f803 	bl	80014f8 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f6:	f7fe ffff 	bl	80014f8 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e1a8      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002508:	4b2b      	ldr	r3, [pc, #172]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002514:	4b28      	ldr	r3, [pc, #160]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4925      	ldr	r1, [pc, #148]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]
 8002528:	e015      	b.n	8002556 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800252a:	4b24      	ldr	r3, [pc, #144]	@ (80025bc <HAL_RCC_OscConfig+0x244>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7fe ffe2 	bl	80014f8 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002538:	f7fe ffde 	bl	80014f8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e187      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254a:	4b1b      	ldr	r3, [pc, #108]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d036      	beq.n	80025d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d016      	beq.n	8002598 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800256a:	4b15      	ldr	r3, [pc, #84]	@ (80025c0 <HAL_RCC_OscConfig+0x248>)
 800256c:	2201      	movs	r2, #1
 800256e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7fe ffc2 	bl	80014f8 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002578:	f7fe ffbe 	bl	80014f8 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e167      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258a:	4b0b      	ldr	r3, [pc, #44]	@ (80025b8 <HAL_RCC_OscConfig+0x240>)
 800258c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0x200>
 8002596:	e01b      	b.n	80025d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002598:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <HAL_RCC_OscConfig+0x248>)
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259e:	f7fe ffab 	bl	80014f8 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a4:	e00e      	b.n	80025c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a6:	f7fe ffa7 	bl	80014f8 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d907      	bls.n	80025c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e150      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
 80025b8:	40023800 	.word	0x40023800
 80025bc:	42470000 	.word	0x42470000
 80025c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c4:	4b88      	ldr	r3, [pc, #544]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 80025c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ea      	bne.n	80025a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 8097 	beq.w	800270c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025de:	2300      	movs	r3, #0
 80025e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e2:	4b81      	ldr	r3, [pc, #516]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10f      	bne.n	800260e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	4b7d      	ldr	r3, [pc, #500]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f6:	4a7c      	ldr	r2, [pc, #496]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 80025f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025fe:	4b7a      	ldr	r3, [pc, #488]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260a:	2301      	movs	r3, #1
 800260c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260e:	4b77      	ldr	r3, [pc, #476]	@ (80027ec <HAL_RCC_OscConfig+0x474>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d118      	bne.n	800264c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800261a:	4b74      	ldr	r3, [pc, #464]	@ (80027ec <HAL_RCC_OscConfig+0x474>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a73      	ldr	r2, [pc, #460]	@ (80027ec <HAL_RCC_OscConfig+0x474>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002626:	f7fe ff67 	bl	80014f8 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262e:	f7fe ff63 	bl	80014f8 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e10c      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	4b6a      	ldr	r3, [pc, #424]	@ (80027ec <HAL_RCC_OscConfig+0x474>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d106      	bne.n	8002662 <HAL_RCC_OscConfig+0x2ea>
 8002654:	4b64      	ldr	r3, [pc, #400]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002658:	4a63      	ldr	r2, [pc, #396]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002660:	e01c      	b.n	800269c <HAL_RCC_OscConfig+0x324>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b05      	cmp	r3, #5
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0x30c>
 800266a:	4b5f      	ldr	r3, [pc, #380]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266e:	4a5e      	ldr	r2, [pc, #376]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	6713      	str	r3, [r2, #112]	@ 0x70
 8002676:	4b5c      	ldr	r3, [pc, #368]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800267a:	4a5b      	ldr	r2, [pc, #364]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6713      	str	r3, [r2, #112]	@ 0x70
 8002682:	e00b      	b.n	800269c <HAL_RCC_OscConfig+0x324>
 8002684:	4b58      	ldr	r3, [pc, #352]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002688:	4a57      	ldr	r2, [pc, #348]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002690:	4b55      	ldr	r3, [pc, #340]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002694:	4a54      	ldr	r2, [pc, #336]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002696:	f023 0304 	bic.w	r3, r3, #4
 800269a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d015      	beq.n	80026d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a4:	f7fe ff28 	bl	80014f8 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ac:	f7fe ff24 	bl	80014f8 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e0cb      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c2:	4b49      	ldr	r3, [pc, #292]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0ee      	beq.n	80026ac <HAL_RCC_OscConfig+0x334>
 80026ce:	e014      	b.n	80026fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d0:	f7fe ff12 	bl	80014f8 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d8:	f7fe ff0e 	bl	80014f8 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e0b5      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ee:	4b3e      	ldr	r3, [pc, #248]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1ee      	bne.n	80026d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026fa:	7dfb      	ldrb	r3, [r7, #23]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d105      	bne.n	800270c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002700:	4b39      	ldr	r3, [pc, #228]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	4a38      	ldr	r2, [pc, #224]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002706:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800270a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80a1 	beq.w	8002858 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002716:	4b34      	ldr	r3, [pc, #208]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b08      	cmp	r3, #8
 8002720:	d05c      	beq.n	80027dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d141      	bne.n	80027ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272a:	4b31      	ldr	r3, [pc, #196]	@ (80027f0 <HAL_RCC_OscConfig+0x478>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe fee2 	bl	80014f8 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe fede 	bl	80014f8 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e087      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274a:	4b27      	ldr	r3, [pc, #156]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69da      	ldr	r2, [r3, #28]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	019b      	lsls	r3, r3, #6
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276c:	085b      	lsrs	r3, r3, #1
 800276e:	3b01      	subs	r3, #1
 8002770:	041b      	lsls	r3, r3, #16
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002778:	061b      	lsls	r3, r3, #24
 800277a:	491b      	ldr	r1, [pc, #108]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002780:	4b1b      	ldr	r3, [pc, #108]	@ (80027f0 <HAL_RCC_OscConfig+0x478>)
 8002782:	2201      	movs	r2, #1
 8002784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002786:	f7fe feb7 	bl	80014f8 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278e:	f7fe feb3 	bl	80014f8 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e05c      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a0:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f0      	beq.n	800278e <HAL_RCC_OscConfig+0x416>
 80027ac:	e054      	b.n	8002858 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ae:	4b10      	ldr	r3, [pc, #64]	@ (80027f0 <HAL_RCC_OscConfig+0x478>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7fe fea0 	bl	80014f8 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fe fe9c 	bl	80014f8 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e045      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ce:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <HAL_RCC_OscConfig+0x470>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x444>
 80027da:	e03d      	b.n	8002858 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d107      	bne.n	80027f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e038      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40007000 	.word	0x40007000
 80027f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002864 <HAL_RCC_OscConfig+0x4ec>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d028      	beq.n	8002854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800280c:	429a      	cmp	r2, r3
 800280e:	d121      	bne.n	8002854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d11a      	bne.n	8002854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002824:	4013      	ands	r3, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800282a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800282c:	4293      	cmp	r3, r2
 800282e:	d111      	bne.n	8002854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283a:	085b      	lsrs	r3, r3, #1
 800283c:	3b01      	subs	r3, #1
 800283e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d107      	bne.n	8002854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800

08002868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0cc      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800287c:	4b68      	ldr	r3, [pc, #416]	@ (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d90c      	bls.n	80028a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	4b65      	ldr	r3, [pc, #404]	@ (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002892:	4b63      	ldr	r3, [pc, #396]	@ (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0b8      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028bc:	4b59      	ldr	r3, [pc, #356]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	4a58      	ldr	r2, [pc, #352]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d4:	4b53      	ldr	r3, [pc, #332]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	4a52      	ldr	r2, [pc, #328]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e0:	4b50      	ldr	r3, [pc, #320]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	494d      	ldr	r1, [pc, #308]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d044      	beq.n	8002988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d107      	bne.n	8002916 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	4b47      	ldr	r3, [pc, #284]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d119      	bne.n	8002946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e07f      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d003      	beq.n	8002926 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002922:	2b03      	cmp	r3, #3
 8002924:	d107      	bne.n	8002936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002926:	4b3f      	ldr	r3, [pc, #252]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e06f      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002936:	4b3b      	ldr	r3, [pc, #236]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e067      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002946:	4b37      	ldr	r3, [pc, #220]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f023 0203 	bic.w	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	4934      	ldr	r1, [pc, #208]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	4313      	orrs	r3, r2
 8002956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002958:	f7fe fdce 	bl	80014f8 <HAL_GetTick>
 800295c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295e:	e00a      	b.n	8002976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002960:	f7fe fdca 	bl	80014f8 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e04f      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002976:	4b2b      	ldr	r3, [pc, #172]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 020c 	and.w	r2, r3, #12
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	429a      	cmp	r2, r3
 8002986:	d1eb      	bne.n	8002960 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002988:	4b25      	ldr	r3, [pc, #148]	@ (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d20c      	bcs.n	80029b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b22      	ldr	r3, [pc, #136]	@ (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	4b20      	ldr	r3, [pc, #128]	@ (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e032      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029bc:	4b19      	ldr	r3, [pc, #100]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4916      	ldr	r1, [pc, #88]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029da:	4b12      	ldr	r3, [pc, #72]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	490e      	ldr	r1, [pc, #56]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ee:	f000 f821 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 80029f2:	4602      	mov	r2, r0
 80029f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	490a      	ldr	r1, [pc, #40]	@ (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	5ccb      	ldrb	r3, [r1, r3]
 8002a02:	fa22 f303 	lsr.w	r3, r2, r3
 8002a06:	4a09      	ldr	r2, [pc, #36]	@ (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a0a:	4b09      	ldr	r3, [pc, #36]	@ (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe fd2e 	bl	8001470 <HAL_InitTick>

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40023c00 	.word	0x40023c00
 8002a24:	40023800 	.word	0x40023800
 8002a28:	08005668 	.word	0x08005668
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	20000004 	.word	0x20000004

08002a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a38:	b090      	sub	sp, #64	@ 0x40
 8002a3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a4c:	4b59      	ldr	r3, [pc, #356]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d00d      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0x40>
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	f200 80a1 	bhi.w	8002ba0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0x34>
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d003      	beq.n	8002a6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a66:	e09b      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a68:	4b53      	ldr	r3, [pc, #332]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a6c:	e09b      	b.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a6e:	4b53      	ldr	r3, [pc, #332]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0x188>)
 8002a70:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a72:	e098      	b.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a74:	4b4f      	ldr	r3, [pc, #316]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a7c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a7e:	4b4d      	ldr	r3, [pc, #308]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d028      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	099b      	lsrs	r3, r3, #6
 8002a90:	2200      	movs	r2, #0
 8002a92:	623b      	str	r3, [r7, #32]
 8002a94:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4b47      	ldr	r3, [pc, #284]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0x188>)
 8002aa0:	fb03 f201 	mul.w	r2, r3, r1
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	fb00 f303 	mul.w	r3, r0, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	4a43      	ldr	r2, [pc, #268]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0x188>)
 8002aae:	fba0 1202 	umull	r1, r2, r0, r2
 8002ab2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ab4:	460a      	mov	r2, r1
 8002ab6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ab8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002aba:	4413      	add	r3, r2
 8002abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	61bb      	str	r3, [r7, #24]
 8002ac4:	61fa      	str	r2, [r7, #28]
 8002ac6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002aca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002ace:	f7fd fe89 	bl	80007e4 <__aeabi_uldivmod>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ada:	e053      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002adc:	4b35      	ldr	r3, [pc, #212]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	099b      	lsrs	r3, r3, #6
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	617a      	str	r2, [r7, #20]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002aee:	f04f 0b00 	mov.w	fp, #0
 8002af2:	4652      	mov	r2, sl
 8002af4:	465b      	mov	r3, fp
 8002af6:	f04f 0000 	mov.w	r0, #0
 8002afa:	f04f 0100 	mov.w	r1, #0
 8002afe:	0159      	lsls	r1, r3, #5
 8002b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b04:	0150      	lsls	r0, r2, #5
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	ebb2 080a 	subs.w	r8, r2, sl
 8002b0e:	eb63 090b 	sbc.w	r9, r3, fp
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b26:	ebb2 0408 	subs.w	r4, r2, r8
 8002b2a:	eb63 0509 	sbc.w	r5, r3, r9
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	00eb      	lsls	r3, r5, #3
 8002b38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b3c:	00e2      	lsls	r2, r4, #3
 8002b3e:	4614      	mov	r4, r2
 8002b40:	461d      	mov	r5, r3
 8002b42:	eb14 030a 	adds.w	r3, r4, sl
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	eb45 030b 	adc.w	r3, r5, fp
 8002b4c:	607b      	str	r3, [r7, #4]
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	028b      	lsls	r3, r1, #10
 8002b5e:	4621      	mov	r1, r4
 8002b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b64:	4621      	mov	r1, r4
 8002b66:	028a      	lsls	r2, r1, #10
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b6e:	2200      	movs	r2, #0
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	60fa      	str	r2, [r7, #12]
 8002b74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b78:	f7fd fe34 	bl	80007e4 <__aeabi_uldivmod>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4613      	mov	r3, r2
 8002b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b84:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	0c1b      	lsrs	r3, r3, #16
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	3301      	adds	r3, #1
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002b94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b9e:	e002      	b.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ba0:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3740      	adds	r7, #64	@ 0x40
 8002bac:	46bd      	mov	sp, r7
 8002bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	00f42400 	.word	0x00f42400
 8002bbc:	017d7840 	.word	0x017d7840

08002bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bc4:	4b03      	ldr	r3, [pc, #12]	@ (8002bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20000000 	.word	0x20000000

08002bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bdc:	f7ff fff0 	bl	8002bc0 <HAL_RCC_GetHCLKFreq>
 8002be0:	4602      	mov	r2, r0
 8002be2:	4b05      	ldr	r3, [pc, #20]	@ (8002bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	0a9b      	lsrs	r3, r3, #10
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	4903      	ldr	r1, [pc, #12]	@ (8002bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bee:	5ccb      	ldrb	r3, [r1, r3]
 8002bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	08005678 	.word	0x08005678

08002c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c04:	f7ff ffdc 	bl	8002bc0 <HAL_RCC_GetHCLKFreq>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	4b05      	ldr	r3, [pc, #20]	@ (8002c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	0b5b      	lsrs	r3, r3, #13
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	4903      	ldr	r1, [pc, #12]	@ (8002c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c16:	5ccb      	ldrb	r3, [r1, r3]
 8002c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40023800 	.word	0x40023800
 8002c24:	08005678 	.word	0x08005678

08002c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e041      	b.n	8002cbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fe fa5e 	bl	8001110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3304      	adds	r3, #4
 8002c64:	4619      	mov	r1, r3
 8002c66:	4610      	mov	r0, r2
 8002c68:	f000 fd54 	bl	8003714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d001      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e044      	b.n	8002d6a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a1e      	ldr	r2, [pc, #120]	@ (8002d78 <HAL_TIM_Base_Start_IT+0xb0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d018      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x6c>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d0a:	d013      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x6c>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a1a      	ldr	r2, [pc, #104]	@ (8002d7c <HAL_TIM_Base_Start_IT+0xb4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00e      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x6c>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a19      	ldr	r2, [pc, #100]	@ (8002d80 <HAL_TIM_Base_Start_IT+0xb8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d009      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x6c>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a17      	ldr	r2, [pc, #92]	@ (8002d84 <HAL_TIM_Base_Start_IT+0xbc>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d004      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0x6c>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a16      	ldr	r2, [pc, #88]	@ (8002d88 <HAL_TIM_Base_Start_IT+0xc0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d111      	bne.n	8002d58 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b06      	cmp	r3, #6
 8002d44:	d010      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0201 	orr.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d56:	e007      	b.n	8002d68 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40010000 	.word	0x40010000
 8002d7c:	40000400 	.word	0x40000400
 8002d80:	40000800 	.word	0x40000800
 8002d84:	40000c00 	.word	0x40000c00
 8002d88:	40014000 	.word	0x40014000

08002d8c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e041      	b.n	8002e22 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d106      	bne.n	8002db8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f839 	bl	8002e2a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4610      	mov	r0, r2
 8002dcc:	f000 fca2 	bl	8003714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e041      	b.n	8002ed4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d106      	bne.n	8002e6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f839 	bl	8002edc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	f000 fc49 	bl	8003714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d109      	bne.n	8002f14 <HAL_TIM_PWM_Start+0x24>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	bf14      	ite	ne
 8002f0c:	2301      	movne	r3, #1
 8002f0e:	2300      	moveq	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	e022      	b.n	8002f5a <HAL_TIM_PWM_Start+0x6a>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d109      	bne.n	8002f2e <HAL_TIM_PWM_Start+0x3e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	bf14      	ite	ne
 8002f26:	2301      	movne	r3, #1
 8002f28:	2300      	moveq	r3, #0
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	e015      	b.n	8002f5a <HAL_TIM_PWM_Start+0x6a>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d109      	bne.n	8002f48 <HAL_TIM_PWM_Start+0x58>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	bf14      	ite	ne
 8002f40:	2301      	movne	r3, #1
 8002f42:	2300      	moveq	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	e008      	b.n	8002f5a <HAL_TIM_PWM_Start+0x6a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	bf14      	ite	ne
 8002f54:	2301      	movne	r3, #1
 8002f56:	2300      	moveq	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e068      	b.n	8003034 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d104      	bne.n	8002f72 <HAL_TIM_PWM_Start+0x82>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f70:	e013      	b.n	8002f9a <HAL_TIM_PWM_Start+0xaa>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d104      	bne.n	8002f82 <HAL_TIM_PWM_Start+0x92>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f80:	e00b      	b.n	8002f9a <HAL_TIM_PWM_Start+0xaa>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d104      	bne.n	8002f92 <HAL_TIM_PWM_Start+0xa2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f90:	e003      	b.n	8002f9a <HAL_TIM_PWM_Start+0xaa>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2202      	movs	r2, #2
 8002f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	6839      	ldr	r1, [r7, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fe68 	bl	8003c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a23      	ldr	r2, [pc, #140]	@ (800303c <HAL_TIM_PWM_Start+0x14c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d107      	bne.n	8002fc2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fc0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a1d      	ldr	r2, [pc, #116]	@ (800303c <HAL_TIM_PWM_Start+0x14c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d018      	beq.n	8002ffe <HAL_TIM_PWM_Start+0x10e>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fd4:	d013      	beq.n	8002ffe <HAL_TIM_PWM_Start+0x10e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a19      	ldr	r2, [pc, #100]	@ (8003040 <HAL_TIM_PWM_Start+0x150>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d00e      	beq.n	8002ffe <HAL_TIM_PWM_Start+0x10e>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a17      	ldr	r2, [pc, #92]	@ (8003044 <HAL_TIM_PWM_Start+0x154>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d009      	beq.n	8002ffe <HAL_TIM_PWM_Start+0x10e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a16      	ldr	r2, [pc, #88]	@ (8003048 <HAL_TIM_PWM_Start+0x158>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d004      	beq.n	8002ffe <HAL_TIM_PWM_Start+0x10e>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a14      	ldr	r2, [pc, #80]	@ (800304c <HAL_TIM_PWM_Start+0x15c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d111      	bne.n	8003022 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b06      	cmp	r3, #6
 800300e:	d010      	beq.n	8003032 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003020:	e007      	b.n	8003032 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0201 	orr.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40010000 	.word	0x40010000
 8003040:	40000400 	.word	0x40000400
 8003044:	40000800 	.word	0x40000800
 8003048:	40000c00 	.word	0x40000c00
 800304c:	40014000 	.word	0x40014000

08003050 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2200      	movs	r2, #0
 8003060:	6839      	ldr	r1, [r7, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fe08 	bl	8003c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a29      	ldr	r2, [pc, #164]	@ (8003114 <HAL_TIM_PWM_Stop+0xc4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d117      	bne.n	80030a2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6a1a      	ldr	r2, [r3, #32]
 8003078:	f241 1311 	movw	r3, #4369	@ 0x1111
 800307c:	4013      	ands	r3, r2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10f      	bne.n	80030a2 <HAL_TIM_PWM_Stop+0x52>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6a1a      	ldr	r2, [r3, #32]
 8003088:	f240 4344 	movw	r3, #1092	@ 0x444
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d107      	bne.n	80030a2 <HAL_TIM_PWM_Stop+0x52>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6a1a      	ldr	r2, [r3, #32]
 80030a8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10f      	bne.n	80030d2 <HAL_TIM_PWM_Stop+0x82>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6a1a      	ldr	r2, [r3, #32]
 80030b8:	f240 4344 	movw	r3, #1092	@ 0x444
 80030bc:	4013      	ands	r3, r2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d107      	bne.n	80030d2 <HAL_TIM_PWM_Stop+0x82>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0201 	bic.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d104      	bne.n	80030e2 <HAL_TIM_PWM_Stop+0x92>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030e0:	e013      	b.n	800310a <HAL_TIM_PWM_Stop+0xba>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d104      	bne.n	80030f2 <HAL_TIM_PWM_Stop+0xa2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030f0:	e00b      	b.n	800310a <HAL_TIM_PWM_Stop+0xba>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d104      	bne.n	8003102 <HAL_TIM_PWM_Stop+0xb2>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003100:	e003      	b.n	800310a <HAL_TIM_PWM_Stop+0xba>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40010000 	.word	0x40010000

08003118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d020      	beq.n	800317c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d01b      	beq.n	800317c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0202 	mvn.w	r2, #2
 800314c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fab7 	bl	80036d6 <HAL_TIM_IC_CaptureCallback>
 8003168:	e005      	b.n	8003176 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 faa9 	bl	80036c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 faba 	bl	80036ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b00      	cmp	r3, #0
 8003184:	d020      	beq.n	80031c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01b      	beq.n	80031c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0204 	mvn.w	r2, #4
 8003198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fa91 	bl	80036d6 <HAL_TIM_IC_CaptureCallback>
 80031b4:	e005      	b.n	80031c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fa83 	bl	80036c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fa94 	bl	80036ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d020      	beq.n	8003214 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01b      	beq.n	8003214 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0208 	mvn.w	r2, #8
 80031e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2204      	movs	r2, #4
 80031ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fa6b 	bl	80036d6 <HAL_TIM_IC_CaptureCallback>
 8003200:	e005      	b.n	800320e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fa5d 	bl	80036c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fa6e 	bl	80036ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	2b00      	cmp	r3, #0
 800321c:	d020      	beq.n	8003260 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	2b00      	cmp	r3, #0
 8003226:	d01b      	beq.n	8003260 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f06f 0210 	mvn.w	r2, #16
 8003230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2208      	movs	r2, #8
 8003236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fa45 	bl	80036d6 <HAL_TIM_IC_CaptureCallback>
 800324c:	e005      	b.n	800325a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fa37 	bl	80036c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 fa48 	bl	80036ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00c      	beq.n	8003284 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0201 	mvn.w	r2, #1
 800327c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f001 ffc6 	bl	8005210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00c      	beq.n	80032a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003294:	2b00      	cmp	r3, #0
 8003296:	d007      	beq.n	80032a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80032a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fdd8 	bl	8003e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00c      	beq.n	80032cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d007      	beq.n	80032cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80032c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fa19 	bl	80036fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00c      	beq.n	80032f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d007      	beq.n	80032f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0220 	mvn.w	r2, #32
 80032e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fdaa 	bl	8003e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032f0:	bf00      	nop
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003312:	2302      	movs	r3, #2
 8003314:	e048      	b.n	80033a8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b0c      	cmp	r3, #12
 8003322:	d839      	bhi.n	8003398 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003324:	a201      	add	r2, pc, #4	@ (adr r2, 800332c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332a:	bf00      	nop
 800332c:	08003361 	.word	0x08003361
 8003330:	08003399 	.word	0x08003399
 8003334:	08003399 	.word	0x08003399
 8003338:	08003399 	.word	0x08003399
 800333c:	0800336f 	.word	0x0800336f
 8003340:	08003399 	.word	0x08003399
 8003344:	08003399 	.word	0x08003399
 8003348:	08003399 	.word	0x08003399
 800334c:	0800337d 	.word	0x0800337d
 8003350:	08003399 	.word	0x08003399
 8003354:	08003399 	.word	0x08003399
 8003358:	08003399 	.word	0x08003399
 800335c:	0800338b 	.word	0x0800338b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fa60 	bl	800382c <TIM_OC1_SetConfig>
      break;
 800336c:	e017      	b.n	800339e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fabf 	bl	80038f8 <TIM_OC2_SetConfig>
      break;
 800337a:	e010      	b.n	800339e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fb24 	bl	80039d0 <TIM_OC3_SetConfig>
      break;
 8003388:	e009      	b.n	800339e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fb87 	bl	8003aa4 <TIM_OC4_SetConfig>
      break;
 8003396:	e002      	b.n	800339e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	75fb      	strb	r3, [r7, #23]
      break;
 800339c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e0ae      	b.n	800352c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b0c      	cmp	r3, #12
 80033da:	f200 809f 	bhi.w	800351c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80033de:	a201      	add	r2, pc, #4	@ (adr r2, 80033e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e4:	08003419 	.word	0x08003419
 80033e8:	0800351d 	.word	0x0800351d
 80033ec:	0800351d 	.word	0x0800351d
 80033f0:	0800351d 	.word	0x0800351d
 80033f4:	08003459 	.word	0x08003459
 80033f8:	0800351d 	.word	0x0800351d
 80033fc:	0800351d 	.word	0x0800351d
 8003400:	0800351d 	.word	0x0800351d
 8003404:	0800349b 	.word	0x0800349b
 8003408:	0800351d 	.word	0x0800351d
 800340c:	0800351d 	.word	0x0800351d
 8003410:	0800351d 	.word	0x0800351d
 8003414:	080034db 	.word	0x080034db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68b9      	ldr	r1, [r7, #8]
 800341e:	4618      	mov	r0, r3
 8003420:	f000 fa04 	bl	800382c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0208 	orr.w	r2, r2, #8
 8003432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0204 	bic.w	r2, r2, #4
 8003442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6999      	ldr	r1, [r3, #24]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	619a      	str	r2, [r3, #24]
      break;
 8003456:	e064      	b.n	8003522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fa4a 	bl	80038f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6999      	ldr	r1, [r3, #24]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	021a      	lsls	r2, r3, #8
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	619a      	str	r2, [r3, #24]
      break;
 8003498:	e043      	b.n	8003522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68b9      	ldr	r1, [r7, #8]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fa95 	bl	80039d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69da      	ldr	r2, [r3, #28]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f042 0208 	orr.w	r2, r2, #8
 80034b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0204 	bic.w	r2, r2, #4
 80034c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69d9      	ldr	r1, [r3, #28]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	61da      	str	r2, [r3, #28]
      break;
 80034d8:	e023      	b.n	8003522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68b9      	ldr	r1, [r7, #8]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fadf 	bl	8003aa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69d9      	ldr	r1, [r3, #28]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	021a      	lsls	r2, r3, #8
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	61da      	str	r2, [r3, #28]
      break;
 800351a:	e002      	b.n	8003522 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	75fb      	strb	r3, [r7, #23]
      break;
 8003520:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800352a:	7dfb      	ldrb	r3, [r7, #23]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_TIM_ConfigClockSource+0x1c>
 800354c:	2302      	movs	r3, #2
 800354e:	e0b4      	b.n	80036ba <HAL_TIM_ConfigClockSource+0x186>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800356e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003576:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003588:	d03e      	beq.n	8003608 <HAL_TIM_ConfigClockSource+0xd4>
 800358a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800358e:	f200 8087 	bhi.w	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 8003592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003596:	f000 8086 	beq.w	80036a6 <HAL_TIM_ConfigClockSource+0x172>
 800359a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800359e:	d87f      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035a0:	2b70      	cmp	r3, #112	@ 0x70
 80035a2:	d01a      	beq.n	80035da <HAL_TIM_ConfigClockSource+0xa6>
 80035a4:	2b70      	cmp	r3, #112	@ 0x70
 80035a6:	d87b      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035a8:	2b60      	cmp	r3, #96	@ 0x60
 80035aa:	d050      	beq.n	800364e <HAL_TIM_ConfigClockSource+0x11a>
 80035ac:	2b60      	cmp	r3, #96	@ 0x60
 80035ae:	d877      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035b0:	2b50      	cmp	r3, #80	@ 0x50
 80035b2:	d03c      	beq.n	800362e <HAL_TIM_ConfigClockSource+0xfa>
 80035b4:	2b50      	cmp	r3, #80	@ 0x50
 80035b6:	d873      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035b8:	2b40      	cmp	r3, #64	@ 0x40
 80035ba:	d058      	beq.n	800366e <HAL_TIM_ConfigClockSource+0x13a>
 80035bc:	2b40      	cmp	r3, #64	@ 0x40
 80035be:	d86f      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035c0:	2b30      	cmp	r3, #48	@ 0x30
 80035c2:	d064      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x15a>
 80035c4:	2b30      	cmp	r3, #48	@ 0x30
 80035c6:	d86b      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d060      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x15a>
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d867      	bhi.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d05c      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x15a>
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	d05a      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x15a>
 80035d8:	e062      	b.n	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035ea:	f000 fb25 	bl	8003c38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80035fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	609a      	str	r2, [r3, #8]
      break;
 8003606:	e04f      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003618:	f000 fb0e 	bl	8003c38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800362a:	609a      	str	r2, [r3, #8]
      break;
 800362c:	e03c      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800363a:	461a      	mov	r2, r3
 800363c:	f000 fa82 	bl	8003b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2150      	movs	r1, #80	@ 0x50
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fadb 	bl	8003c02 <TIM_ITRx_SetConfig>
      break;
 800364c:	e02c      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800365a:	461a      	mov	r2, r3
 800365c:	f000 faa1 	bl	8003ba2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2160      	movs	r1, #96	@ 0x60
 8003666:	4618      	mov	r0, r3
 8003668:	f000 facb 	bl	8003c02 <TIM_ITRx_SetConfig>
      break;
 800366c:	e01c      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800367a:	461a      	mov	r2, r3
 800367c:	f000 fa62 	bl	8003b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2140      	movs	r1, #64	@ 0x40
 8003686:	4618      	mov	r0, r3
 8003688:	f000 fabb 	bl	8003c02 <TIM_ITRx_SetConfig>
      break;
 800368c:	e00c      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4619      	mov	r1, r3
 8003698:	4610      	mov	r0, r2
 800369a:	f000 fab2 	bl	8003c02 <TIM_ITRx_SetConfig>
      break;
 800369e:	e003      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      break;
 80036a4:	e000      	b.n	80036a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a3a      	ldr	r2, [pc, #232]	@ (8003810 <TIM_Base_SetConfig+0xfc>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00f      	beq.n	800374c <TIM_Base_SetConfig+0x38>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003732:	d00b      	beq.n	800374c <TIM_Base_SetConfig+0x38>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a37      	ldr	r2, [pc, #220]	@ (8003814 <TIM_Base_SetConfig+0x100>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d007      	beq.n	800374c <TIM_Base_SetConfig+0x38>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a36      	ldr	r2, [pc, #216]	@ (8003818 <TIM_Base_SetConfig+0x104>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d003      	beq.n	800374c <TIM_Base_SetConfig+0x38>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a35      	ldr	r2, [pc, #212]	@ (800381c <TIM_Base_SetConfig+0x108>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d108      	bne.n	800375e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a2b      	ldr	r2, [pc, #172]	@ (8003810 <TIM_Base_SetConfig+0xfc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d01b      	beq.n	800379e <TIM_Base_SetConfig+0x8a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800376c:	d017      	beq.n	800379e <TIM_Base_SetConfig+0x8a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a28      	ldr	r2, [pc, #160]	@ (8003814 <TIM_Base_SetConfig+0x100>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d013      	beq.n	800379e <TIM_Base_SetConfig+0x8a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a27      	ldr	r2, [pc, #156]	@ (8003818 <TIM_Base_SetConfig+0x104>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00f      	beq.n	800379e <TIM_Base_SetConfig+0x8a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a26      	ldr	r2, [pc, #152]	@ (800381c <TIM_Base_SetConfig+0x108>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00b      	beq.n	800379e <TIM_Base_SetConfig+0x8a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a25      	ldr	r2, [pc, #148]	@ (8003820 <TIM_Base_SetConfig+0x10c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d007      	beq.n	800379e <TIM_Base_SetConfig+0x8a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a24      	ldr	r2, [pc, #144]	@ (8003824 <TIM_Base_SetConfig+0x110>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d003      	beq.n	800379e <TIM_Base_SetConfig+0x8a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a23      	ldr	r2, [pc, #140]	@ (8003828 <TIM_Base_SetConfig+0x114>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d108      	bne.n	80037b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a0e      	ldr	r2, [pc, #56]	@ (8003810 <TIM_Base_SetConfig+0xfc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d103      	bne.n	80037e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d105      	bne.n	8003802 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f023 0201 	bic.w	r2, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	611a      	str	r2, [r3, #16]
  }
}
 8003802:	bf00      	nop
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40010000 	.word	0x40010000
 8003814:	40000400 	.word	0x40000400
 8003818:	40000800 	.word	0x40000800
 800381c:	40000c00 	.word	0x40000c00
 8003820:	40014000 	.word	0x40014000
 8003824:	40014400 	.word	0x40014400
 8003828:	40014800 	.word	0x40014800

0800382c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	f023 0201 	bic.w	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800385a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0303 	bic.w	r3, r3, #3
 8003862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f023 0302 	bic.w	r3, r3, #2
 8003874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a1c      	ldr	r2, [pc, #112]	@ (80038f4 <TIM_OC1_SetConfig+0xc8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d10c      	bne.n	80038a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f023 0308 	bic.w	r3, r3, #8
 800388e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f023 0304 	bic.w	r3, r3, #4
 80038a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a13      	ldr	r2, [pc, #76]	@ (80038f4 <TIM_OC1_SetConfig+0xc8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d111      	bne.n	80038ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	621a      	str	r2, [r3, #32]
}
 80038e8:	bf00      	nop
 80038ea:	371c      	adds	r7, #28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	40010000 	.word	0x40010000

080038f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	f023 0210 	bic.w	r2, r3, #16
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800392e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f023 0320 	bic.w	r3, r3, #32
 8003942:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a1e      	ldr	r2, [pc, #120]	@ (80039cc <TIM_OC2_SetConfig+0xd4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d10d      	bne.n	8003974 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800395e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003972:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a15      	ldr	r2, [pc, #84]	@ (80039cc <TIM_OC2_SetConfig+0xd4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d113      	bne.n	80039a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003982:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800398a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	621a      	str	r2, [r3, #32]
}
 80039be:	bf00      	nop
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40010000 	.word	0x40010000

080039d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0303 	bic.w	r3, r3, #3
 8003a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	021b      	lsls	r3, r3, #8
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a1d      	ldr	r2, [pc, #116]	@ (8003aa0 <TIM_OC3_SetConfig+0xd0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d10d      	bne.n	8003a4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a14      	ldr	r2, [pc, #80]	@ (8003aa0 <TIM_OC3_SetConfig+0xd0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d113      	bne.n	8003a7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	621a      	str	r2, [r3, #32]
}
 8003a94:	bf00      	nop
 8003a96:	371c      	adds	r7, #28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	40010000 	.word	0x40010000

08003aa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	021b      	lsls	r3, r3, #8
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003aee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	031b      	lsls	r3, r3, #12
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a10      	ldr	r2, [pc, #64]	@ (8003b40 <TIM_OC4_SetConfig+0x9c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d109      	bne.n	8003b18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	019b      	lsls	r3, r3, #6
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	621a      	str	r2, [r3, #32]
}
 8003b32:	bf00      	nop
 8003b34:	371c      	adds	r7, #28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40010000 	.word	0x40010000

08003b44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	f023 0201 	bic.w	r2, r3, #1
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f023 030a 	bic.w	r3, r3, #10
 8003b80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	621a      	str	r2, [r3, #32]
}
 8003b96:	bf00      	nop
 8003b98:	371c      	adds	r7, #28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b087      	sub	sp, #28
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	f023 0210 	bic.w	r2, r3, #16
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	031b      	lsls	r3, r3, #12
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003bde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	621a      	str	r2, [r3, #32]
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b085      	sub	sp, #20
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f043 0307 	orr.w	r3, r3, #7
 8003c24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	609a      	str	r2, [r3, #8]
}
 8003c2c:	bf00      	nop
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	021a      	lsls	r2, r3, #8
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	609a      	str	r2, [r3, #8]
}
 8003c6c:	bf00      	nop
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a1a      	ldr	r2, [r3, #32]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	401a      	ands	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a1a      	ldr	r2, [r3, #32]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f003 031f 	and.w	r3, r3, #31
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	621a      	str	r2, [r3, #32]
}
 8003cb6:	bf00      	nop
 8003cb8:	371c      	adds	r7, #28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
	...

08003cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e050      	b.n	8003d7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003d8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d018      	beq.n	8003d52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d28:	d013      	beq.n	8003d52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a18      	ldr	r2, [pc, #96]	@ (8003d90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d00e      	beq.n	8003d52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a16      	ldr	r2, [pc, #88]	@ (8003d94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d009      	beq.n	8003d52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a15      	ldr	r2, [pc, #84]	@ (8003d98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d004      	beq.n	8003d52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a13      	ldr	r2, [pc, #76]	@ (8003d9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d10c      	bne.n	8003d6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40010000 	.word	0x40010000
 8003d90:	40000400 	.word	0x40000400
 8003d94:	40000800 	.word	0x40000800
 8003d98:	40000c00 	.word	0x40000c00
 8003d9c:	40014000 	.word	0x40014000

08003da0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e03d      	b.n	8003e38 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e042      	b.n	8003f04 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fd f9d0 	bl	8001238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2224      	movs	r2, #36	@ 0x24
 8003e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 fd07 	bl	80048c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695a      	ldr	r2, [r3, #20]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	4613      	mov	r3, r2
 8003f18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	d121      	bne.n	8003f6a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <HAL_UART_Transmit_IT+0x26>
 8003f2c:	88fb      	ldrh	r3, [r7, #6]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e01a      	b.n	8003f6c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	88fa      	ldrh	r2, [r7, #6]
 8003f40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	88fa      	ldrh	r2, [r7, #6]
 8003f46:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2221      	movs	r2, #33	@ 0x21
 8003f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f64:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	e000      	b.n	8003f6c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003f6a:	2302      	movs	r3, #2
  }
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	4613      	mov	r3, r2
 8003f84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d112      	bne.n	8003fb8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <HAL_UART_Receive_IT+0x26>
 8003f98:	88fb      	ldrh	r3, [r7, #6]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e00b      	b.n	8003fba <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fa8:	88fb      	ldrh	r3, [r7, #6]
 8003faa:	461a      	mov	r2, r3
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 fab0 	bl	8004514 <UART_Start_Receive_IT>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	e000      	b.n	8003fba <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003fb8:	2302      	movs	r3, #2
  }
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b0ba      	sub	sp, #232	@ 0xe8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004002:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10f      	bne.n	800402a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800400a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b00      	cmp	r3, #0
 8004014:	d009      	beq.n	800402a <HAL_UART_IRQHandler+0x66>
 8004016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800401a:	f003 0320 	and.w	r3, r3, #32
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fb8f 	bl	8004746 <UART_Receive_IT>
      return;
 8004028:	e25b      	b.n	80044e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800402a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 80de 	beq.w	80041f0 <HAL_UART_IRQHandler+0x22c>
 8004034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d106      	bne.n	800404e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004044:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 80d1 	beq.w	80041f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800404e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00b      	beq.n	8004072 <HAL_UART_IRQHandler+0xae>
 800405a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800405e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d005      	beq.n	8004072 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406a:	f043 0201 	orr.w	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00b      	beq.n	8004096 <HAL_UART_IRQHandler+0xd2>
 800407e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d005      	beq.n	8004096 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408e:	f043 0202 	orr.w	r2, r3, #2
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00b      	beq.n	80040ba <HAL_UART_IRQHandler+0xf6>
 80040a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d005      	beq.n	80040ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b2:	f043 0204 	orr.w	r2, r3, #4
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d011      	beq.n	80040ea <HAL_UART_IRQHandler+0x126>
 80040c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d105      	bne.n	80040de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d005      	beq.n	80040ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e2:	f043 0208 	orr.w	r2, r3, #8
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 81f2 	beq.w	80044d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_UART_IRQHandler+0x14e>
 8004100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fb1a 	bl	8004746 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800411c:	2b40      	cmp	r3, #64	@ 0x40
 800411e:	bf0c      	ite	eq
 8004120:	2301      	moveq	r3, #1
 8004122:	2300      	movne	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d103      	bne.n	800413e <HAL_UART_IRQHandler+0x17a>
 8004136:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800413a:	2b00      	cmp	r3, #0
 800413c:	d04f      	beq.n	80041de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fa22 	bl	8004588 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414e:	2b40      	cmp	r3, #64	@ 0x40
 8004150:	d141      	bne.n	80041d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3314      	adds	r3, #20
 8004158:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004168:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800416c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004170:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3314      	adds	r3, #20
 800417a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800417e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004182:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004186:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800418a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800418e:	e841 2300 	strex	r3, r2, [r1]
 8004192:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004196:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1d9      	bne.n	8004152 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d013      	beq.n	80041ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041aa:	4a7e      	ldr	r2, [pc, #504]	@ (80043a4 <HAL_UART_IRQHandler+0x3e0>)
 80041ac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fd ff1f 	bl	8001ff6 <HAL_DMA_Abort_IT>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d016      	beq.n	80041ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041c8:	4610      	mov	r0, r2
 80041ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041cc:	e00e      	b.n	80041ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f98a 	bl	80044e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d4:	e00a      	b.n	80041ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f986 	bl	80044e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041dc:	e006      	b.n	80041ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f982 	bl	80044e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80041ea:	e175      	b.n	80044d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ec:	bf00      	nop
    return;
 80041ee:	e173      	b.n	80044d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	f040 814f 	bne.w	8004498 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041fe:	f003 0310 	and.w	r3, r3, #16
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 8148 	beq.w	8004498 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8141 	beq.w	8004498 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004216:	2300      	movs	r3, #0
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	60bb      	str	r3, [r7, #8]
 800422a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004236:	2b40      	cmp	r3, #64	@ 0x40
 8004238:	f040 80b6 	bne.w	80043a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004248:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 8145 	beq.w	80044dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004256:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800425a:	429a      	cmp	r2, r3
 800425c:	f080 813e 	bcs.w	80044dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004266:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004272:	f000 8088 	beq.w	8004386 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	330c      	adds	r3, #12
 800427c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800428c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004294:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	330c      	adds	r3, #12
 800429e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80042a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042b2:	e841 2300 	strex	r3, r2, [r1]
 80042b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1d9      	bne.n	8004276 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3314      	adds	r3, #20
 80042c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3314      	adds	r3, #20
 80042e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e1      	bne.n	80042c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3314      	adds	r3, #20
 8004304:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004306:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004308:	e853 3f00 	ldrex	r3, [r3]
 800430c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800430e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004310:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004314:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3314      	adds	r3, #20
 800431e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004322:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004324:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004326:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004328:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800432a:	e841 2300 	strex	r3, r2, [r1]
 800432e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004330:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1e3      	bne.n	80042fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	330c      	adds	r3, #12
 800434a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004354:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004356:	f023 0310 	bic.w	r3, r3, #16
 800435a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	330c      	adds	r3, #12
 8004364:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004368:	65ba      	str	r2, [r7, #88]	@ 0x58
 800436a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800436e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004370:	e841 2300 	strex	r3, r2, [r1]
 8004374:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e3      	bne.n	8004344 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004380:	4618      	mov	r0, r3
 8004382:	f7fd fdc8 	bl	8001f16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2202      	movs	r2, #2
 800438a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004394:	b29b      	uxth	r3, r3
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	b29b      	uxth	r3, r3
 800439a:	4619      	mov	r1, r3
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f8ad 	bl	80044fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043a2:	e09b      	b.n	80044dc <HAL_UART_IRQHandler+0x518>
 80043a4:	0800464f 	.word	0x0800464f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 808e 	beq.w	80044e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80043c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 8089 	beq.w	80044e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	330c      	adds	r3, #12
 80043d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	330c      	adds	r3, #12
 80043ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80043f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80043f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e3      	bne.n	80043ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3314      	adds	r3, #20
 800440c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	623b      	str	r3, [r7, #32]
   return(result);
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3314      	adds	r3, #20
 8004426:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800442a:	633a      	str	r2, [r7, #48]	@ 0x30
 800442c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004432:	e841 2300 	strex	r3, r2, [r1]
 8004436:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1e3      	bne.n	8004406 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	330c      	adds	r3, #12
 8004452:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	e853 3f00 	ldrex	r3, [r3]
 800445a:	60fb      	str	r3, [r7, #12]
   return(result);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0310 	bic.w	r3, r3, #16
 8004462:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	330c      	adds	r3, #12
 800446c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004470:	61fa      	str	r2, [r7, #28]
 8004472:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	69b9      	ldr	r1, [r7, #24]
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	617b      	str	r3, [r7, #20]
   return(result);
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e3      	bne.n	800444c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800448a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800448e:	4619      	mov	r1, r3
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f833 	bl	80044fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004496:	e023      	b.n	80044e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800449c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d009      	beq.n	80044b8 <HAL_UART_IRQHandler+0x4f4>
 80044a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f8e0 	bl	8004676 <UART_Transmit_IT>
    return;
 80044b6:	e014      	b.n	80044e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00e      	beq.n	80044e2 <HAL_UART_IRQHandler+0x51e>
 80044c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d008      	beq.n	80044e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f920 	bl	8004716 <UART_EndTransmit_IT>
    return;
 80044d6:	e004      	b.n	80044e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80044d8:	bf00      	nop
 80044da:	e002      	b.n	80044e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80044dc:	bf00      	nop
 80044de:	e000      	b.n	80044e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80044e0:	bf00      	nop
  }
}
 80044e2:	37e8      	adds	r7, #232	@ 0xe8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	460b      	mov	r3, r1
 8004506:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	4613      	mov	r3, r2
 8004520:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	88fa      	ldrh	r2, [r7, #6]
 800452c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	88fa      	ldrh	r2, [r7, #6]
 8004532:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2222      	movs	r2, #34	@ 0x22
 800453e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d007      	beq.n	800455a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004558:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695a      	ldr	r2, [r3, #20]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0201 	orr.w	r2, r2, #1
 8004568:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0220 	orr.w	r2, r2, #32
 8004578:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004588:	b480      	push	{r7}
 800458a:	b095      	sub	sp, #84	@ 0x54
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800459a:	e853 3f00 	ldrex	r3, [r3]
 800459e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	330c      	adds	r3, #12
 80045ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80045b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e5      	bne.n	8004590 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3314      	adds	r3, #20
 80045ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f023 0301 	bic.w	r3, r3, #1
 80045da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3314      	adds	r3, #20
 80045e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045ec:	e841 2300 	strex	r3, r2, [r1]
 80045f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e5      	bne.n	80045c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d119      	bne.n	8004634 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	330c      	adds	r3, #12
 8004606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	e853 3f00 	ldrex	r3, [r3]
 800460e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f023 0310 	bic.w	r3, r3, #16
 8004616:	647b      	str	r3, [r7, #68]	@ 0x44
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	330c      	adds	r3, #12
 800461e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004620:	61ba      	str	r2, [r7, #24]
 8004622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	6979      	ldr	r1, [r7, #20]
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	613b      	str	r3, [r7, #16]
   return(result);
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e5      	bne.n	8004600 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004642:	bf00      	nop
 8004644:	3754      	adds	r7, #84	@ 0x54
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f7ff ff3d 	bl	80044e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800466e:	bf00      	nop
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004676:	b480      	push	{r7}
 8004678:	b085      	sub	sp, #20
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b21      	cmp	r3, #33	@ 0x21
 8004688:	d13e      	bne.n	8004708 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004692:	d114      	bne.n	80046be <UART_Transmit_IT+0x48>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d110      	bne.n	80046be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	1c9a      	adds	r2, r3, #2
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	621a      	str	r2, [r3, #32]
 80046bc:	e008      	b.n	80046d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	1c59      	adds	r1, r3, #1
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6211      	str	r1, [r2, #32]
 80046c8:	781a      	ldrb	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29b      	uxth	r3, r3
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	4619      	mov	r1, r3
 80046de:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10f      	bne.n	8004704 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004702:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004704:	2300      	movs	r3, #0
 8004706:	e000      	b.n	800470a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004708:	2302      	movs	r3, #2
  }
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800472c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fd54 	bl	80051e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b08c      	sub	sp, #48	@ 0x30
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b22      	cmp	r3, #34	@ 0x22
 8004758:	f040 80ae 	bne.w	80048b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004764:	d117      	bne.n	8004796 <UART_Receive_IT+0x50>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d113      	bne.n	8004796 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800476e:	2300      	movs	r3, #0
 8004770:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004776:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	b29b      	uxth	r3, r3
 8004780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004784:	b29a      	uxth	r2, r3
 8004786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004788:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478e:	1c9a      	adds	r2, r3, #2
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	629a      	str	r2, [r3, #40]	@ 0x28
 8004794:	e026      	b.n	80047e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800479c:	2300      	movs	r3, #0
 800479e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a8:	d007      	beq.n	80047ba <UART_Receive_IT+0x74>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <UART_Receive_IT+0x82>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	e008      	b.n	80047da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	4619      	mov	r1, r3
 80047f2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d15d      	bne.n	80048b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0220 	bic.w	r2, r2, #32
 8004806:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004816:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483a:	2b01      	cmp	r3, #1
 800483c:	d135      	bne.n	80048aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	e853 3f00 	ldrex	r3, [r3]
 8004852:	613b      	str	r3, [r7, #16]
   return(result);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f023 0310 	bic.w	r3, r3, #16
 800485a:	627b      	str	r3, [r7, #36]	@ 0x24
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	330c      	adds	r3, #12
 8004862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004864:	623a      	str	r2, [r7, #32]
 8004866:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	69f9      	ldr	r1, [r7, #28]
 800486a:	6a3a      	ldr	r2, [r7, #32]
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	61bb      	str	r3, [r7, #24]
   return(result);
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e5      	bne.n	8004844 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0310 	and.w	r3, r3, #16
 8004882:	2b10      	cmp	r3, #16
 8004884:	d10a      	bne.n	800489c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048a0:	4619      	mov	r1, r3
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7ff fe2a 	bl	80044fc <HAL_UARTEx_RxEventCallback>
 80048a8:	e002      	b.n	80048b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fc80 	bl	80051b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	e002      	b.n	80048ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	e000      	b.n	80048ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80048b8:	2302      	movs	r3, #2
  }
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3730      	adds	r7, #48	@ 0x30
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c8:	b0c0      	sub	sp, #256	@ 0x100
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80048dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e0:	68d9      	ldr	r1, [r3, #12]
 80048e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	ea40 0301 	orr.w	r3, r0, r1
 80048ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	431a      	orrs	r2, r3
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800491c:	f021 010c 	bic.w	r1, r1, #12
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800492a:	430b      	orrs	r3, r1
 800492c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800492e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800493a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800493e:	6999      	ldr	r1, [r3, #24]
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	ea40 0301 	orr.w	r3, r0, r1
 800494a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	4b8f      	ldr	r3, [pc, #572]	@ (8004b90 <UART_SetConfig+0x2cc>)
 8004954:	429a      	cmp	r2, r3
 8004956:	d005      	beq.n	8004964 <UART_SetConfig+0xa0>
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4b8d      	ldr	r3, [pc, #564]	@ (8004b94 <UART_SetConfig+0x2d0>)
 8004960:	429a      	cmp	r2, r3
 8004962:	d104      	bne.n	800496e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004964:	f7fe f94c 	bl	8002c00 <HAL_RCC_GetPCLK2Freq>
 8004968:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800496c:	e003      	b.n	8004976 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800496e:	f7fe f933 	bl	8002bd8 <HAL_RCC_GetPCLK1Freq>
 8004972:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004980:	f040 810c 	bne.w	8004b9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004988:	2200      	movs	r2, #0
 800498a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800498e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004992:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004996:	4622      	mov	r2, r4
 8004998:	462b      	mov	r3, r5
 800499a:	1891      	adds	r1, r2, r2
 800499c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800499e:	415b      	adcs	r3, r3
 80049a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80049a6:	4621      	mov	r1, r4
 80049a8:	eb12 0801 	adds.w	r8, r2, r1
 80049ac:	4629      	mov	r1, r5
 80049ae:	eb43 0901 	adc.w	r9, r3, r1
 80049b2:	f04f 0200 	mov.w	r2, #0
 80049b6:	f04f 0300 	mov.w	r3, #0
 80049ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049c6:	4690      	mov	r8, r2
 80049c8:	4699      	mov	r9, r3
 80049ca:	4623      	mov	r3, r4
 80049cc:	eb18 0303 	adds.w	r3, r8, r3
 80049d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80049d4:	462b      	mov	r3, r5
 80049d6:	eb49 0303 	adc.w	r3, r9, r3
 80049da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80049de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80049ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80049ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80049f2:	460b      	mov	r3, r1
 80049f4:	18db      	adds	r3, r3, r3
 80049f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80049f8:	4613      	mov	r3, r2
 80049fa:	eb42 0303 	adc.w	r3, r2, r3
 80049fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004a08:	f7fb feec 	bl	80007e4 <__aeabi_uldivmod>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4b61      	ldr	r3, [pc, #388]	@ (8004b98 <UART_SetConfig+0x2d4>)
 8004a12:	fba3 2302 	umull	r2, r3, r3, r2
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	011c      	lsls	r4, r3, #4
 8004a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a2c:	4642      	mov	r2, r8
 8004a2e:	464b      	mov	r3, r9
 8004a30:	1891      	adds	r1, r2, r2
 8004a32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a34:	415b      	adcs	r3, r3
 8004a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a3c:	4641      	mov	r1, r8
 8004a3e:	eb12 0a01 	adds.w	sl, r2, r1
 8004a42:	4649      	mov	r1, r9
 8004a44:	eb43 0b01 	adc.w	fp, r3, r1
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a5c:	4692      	mov	sl, r2
 8004a5e:	469b      	mov	fp, r3
 8004a60:	4643      	mov	r3, r8
 8004a62:	eb1a 0303 	adds.w	r3, sl, r3
 8004a66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a6a:	464b      	mov	r3, r9
 8004a6c:	eb4b 0303 	adc.w	r3, fp, r3
 8004a70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	18db      	adds	r3, r3, r3
 8004a8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a8e:	4613      	mov	r3, r2
 8004a90:	eb42 0303 	adc.w	r3, r2, r3
 8004a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a9e:	f7fb fea1 	bl	80007e4 <__aeabi_uldivmod>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8004b98 <UART_SetConfig+0x2d4>)
 8004aaa:	fba3 2301 	umull	r2, r3, r3, r1
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	2264      	movs	r2, #100	@ 0x64
 8004ab2:	fb02 f303 	mul.w	r3, r2, r3
 8004ab6:	1acb      	subs	r3, r1, r3
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004abe:	4b36      	ldr	r3, [pc, #216]	@ (8004b98 <UART_SetConfig+0x2d4>)
 8004ac0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ac4:	095b      	lsrs	r3, r3, #5
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004acc:	441c      	add	r4, r3
 8004ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ad8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004adc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ae0:	4642      	mov	r2, r8
 8004ae2:	464b      	mov	r3, r9
 8004ae4:	1891      	adds	r1, r2, r2
 8004ae6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ae8:	415b      	adcs	r3, r3
 8004aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004aec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004af0:	4641      	mov	r1, r8
 8004af2:	1851      	adds	r1, r2, r1
 8004af4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004af6:	4649      	mov	r1, r9
 8004af8:	414b      	adcs	r3, r1
 8004afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004b08:	4659      	mov	r1, fp
 8004b0a:	00cb      	lsls	r3, r1, #3
 8004b0c:	4651      	mov	r1, sl
 8004b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b12:	4651      	mov	r1, sl
 8004b14:	00ca      	lsls	r2, r1, #3
 8004b16:	4610      	mov	r0, r2
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	4642      	mov	r2, r8
 8004b1e:	189b      	adds	r3, r3, r2
 8004b20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b24:	464b      	mov	r3, r9
 8004b26:	460a      	mov	r2, r1
 8004b28:	eb42 0303 	adc.w	r3, r2, r3
 8004b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b44:	460b      	mov	r3, r1
 8004b46:	18db      	adds	r3, r3, r3
 8004b48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	eb42 0303 	adc.w	r3, r2, r3
 8004b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b5a:	f7fb fe43 	bl	80007e4 <__aeabi_uldivmod>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	4b0d      	ldr	r3, [pc, #52]	@ (8004b98 <UART_SetConfig+0x2d4>)
 8004b64:	fba3 1302 	umull	r1, r3, r3, r2
 8004b68:	095b      	lsrs	r3, r3, #5
 8004b6a:	2164      	movs	r1, #100	@ 0x64
 8004b6c:	fb01 f303 	mul.w	r3, r1, r3
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	3332      	adds	r3, #50	@ 0x32
 8004b76:	4a08      	ldr	r2, [pc, #32]	@ (8004b98 <UART_SetConfig+0x2d4>)
 8004b78:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	f003 0207 	and.w	r2, r3, #7
 8004b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4422      	add	r2, r4
 8004b8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b8c:	e106      	b.n	8004d9c <UART_SetConfig+0x4d8>
 8004b8e:	bf00      	nop
 8004b90:	40011000 	.word	0x40011000
 8004b94:	40011400 	.word	0x40011400
 8004b98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ba6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004baa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004bae:	4642      	mov	r2, r8
 8004bb0:	464b      	mov	r3, r9
 8004bb2:	1891      	adds	r1, r2, r2
 8004bb4:	6239      	str	r1, [r7, #32]
 8004bb6:	415b      	adcs	r3, r3
 8004bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bbe:	4641      	mov	r1, r8
 8004bc0:	1854      	adds	r4, r2, r1
 8004bc2:	4649      	mov	r1, r9
 8004bc4:	eb43 0501 	adc.w	r5, r3, r1
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	00eb      	lsls	r3, r5, #3
 8004bd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bd6:	00e2      	lsls	r2, r4, #3
 8004bd8:	4614      	mov	r4, r2
 8004bda:	461d      	mov	r5, r3
 8004bdc:	4643      	mov	r3, r8
 8004bde:	18e3      	adds	r3, r4, r3
 8004be0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004be4:	464b      	mov	r3, r9
 8004be6:	eb45 0303 	adc.w	r3, r5, r3
 8004bea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004bfa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c0a:	4629      	mov	r1, r5
 8004c0c:	008b      	lsls	r3, r1, #2
 8004c0e:	4621      	mov	r1, r4
 8004c10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c14:	4621      	mov	r1, r4
 8004c16:	008a      	lsls	r2, r1, #2
 8004c18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c1c:	f7fb fde2 	bl	80007e4 <__aeabi_uldivmod>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4b60      	ldr	r3, [pc, #384]	@ (8004da8 <UART_SetConfig+0x4e4>)
 8004c26:	fba3 2302 	umull	r2, r3, r3, r2
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	011c      	lsls	r4, r3, #4
 8004c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c40:	4642      	mov	r2, r8
 8004c42:	464b      	mov	r3, r9
 8004c44:	1891      	adds	r1, r2, r2
 8004c46:	61b9      	str	r1, [r7, #24]
 8004c48:	415b      	adcs	r3, r3
 8004c4a:	61fb      	str	r3, [r7, #28]
 8004c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c50:	4641      	mov	r1, r8
 8004c52:	1851      	adds	r1, r2, r1
 8004c54:	6139      	str	r1, [r7, #16]
 8004c56:	4649      	mov	r1, r9
 8004c58:	414b      	adcs	r3, r1
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c68:	4659      	mov	r1, fp
 8004c6a:	00cb      	lsls	r3, r1, #3
 8004c6c:	4651      	mov	r1, sl
 8004c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c72:	4651      	mov	r1, sl
 8004c74:	00ca      	lsls	r2, r1, #3
 8004c76:	4610      	mov	r0, r2
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4642      	mov	r2, r8
 8004c7e:	189b      	adds	r3, r3, r2
 8004c80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c84:	464b      	mov	r3, r9
 8004c86:	460a      	mov	r2, r1
 8004c88:	eb42 0303 	adc.w	r3, r2, r3
 8004c8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ca8:	4649      	mov	r1, r9
 8004caa:	008b      	lsls	r3, r1, #2
 8004cac:	4641      	mov	r1, r8
 8004cae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cb2:	4641      	mov	r1, r8
 8004cb4:	008a      	lsls	r2, r1, #2
 8004cb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004cba:	f7fb fd93 	bl	80007e4 <__aeabi_uldivmod>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	4b38      	ldr	r3, [pc, #224]	@ (8004da8 <UART_SetConfig+0x4e4>)
 8004cc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	2264      	movs	r2, #100	@ 0x64
 8004cce:	fb02 f303 	mul.w	r3, r2, r3
 8004cd2:	1acb      	subs	r3, r1, r3
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	3332      	adds	r3, #50	@ 0x32
 8004cd8:	4a33      	ldr	r2, [pc, #204]	@ (8004da8 <UART_SetConfig+0x4e4>)
 8004cda:	fba2 2303 	umull	r2, r3, r2, r3
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ce4:	441c      	add	r4, r3
 8004ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cea:	2200      	movs	r2, #0
 8004cec:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cee:	677a      	str	r2, [r7, #116]	@ 0x74
 8004cf0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	1891      	adds	r1, r2, r2
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	415b      	adcs	r3, r3
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d04:	4641      	mov	r1, r8
 8004d06:	1851      	adds	r1, r2, r1
 8004d08:	6039      	str	r1, [r7, #0]
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	414b      	adcs	r3, r1
 8004d0e:	607b      	str	r3, [r7, #4]
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d1c:	4659      	mov	r1, fp
 8004d1e:	00cb      	lsls	r3, r1, #3
 8004d20:	4651      	mov	r1, sl
 8004d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d26:	4651      	mov	r1, sl
 8004d28:	00ca      	lsls	r2, r1, #3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4603      	mov	r3, r0
 8004d30:	4642      	mov	r2, r8
 8004d32:	189b      	adds	r3, r3, r2
 8004d34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d36:	464b      	mov	r3, r9
 8004d38:	460a      	mov	r2, r1
 8004d3a:	eb42 0303 	adc.w	r3, r2, r3
 8004d3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d58:	4649      	mov	r1, r9
 8004d5a:	008b      	lsls	r3, r1, #2
 8004d5c:	4641      	mov	r1, r8
 8004d5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d62:	4641      	mov	r1, r8
 8004d64:	008a      	lsls	r2, r1, #2
 8004d66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d6a:	f7fb fd3b 	bl	80007e4 <__aeabi_uldivmod>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4b0d      	ldr	r3, [pc, #52]	@ (8004da8 <UART_SetConfig+0x4e4>)
 8004d74:	fba3 1302 	umull	r1, r3, r3, r2
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	2164      	movs	r1, #100	@ 0x64
 8004d7c:	fb01 f303 	mul.w	r3, r1, r3
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	3332      	adds	r3, #50	@ 0x32
 8004d86:	4a08      	ldr	r2, [pc, #32]	@ (8004da8 <UART_SetConfig+0x4e4>)
 8004d88:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	f003 020f 	and.w	r2, r3, #15
 8004d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4422      	add	r2, r4
 8004d9a:	609a      	str	r2, [r3, #8]
}
 8004d9c:	bf00      	nop
 8004d9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004da2:	46bd      	mov	sp, r7
 8004da4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004da8:	51eb851f 	.word	0x51eb851f

08004dac <send_state_via_uart>:

/* ----------------------------------- FLAG FOR TRANSMISSIONS ----------------------------------- */
bool transmit_flag = true;

void send_state_via_uart(sm_state_var_t state, uint8_t temperature, uint16_t control, uint8_t periph_st)
{
 8004dac:	b084      	sub	sp, #16
 8004dae:	b580      	push	{r7, lr}
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	f107 0c08 	add.w	ip, r7, #8
 8004db6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if(transmit_flag)
 8004dba:	4b16      	ldr	r3, [pc, #88]	@ (8004e14 <send_state_via_uart+0x68>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d021      	beq.n	8004e06 <send_state_via_uart+0x5a>
	{
		transmit_flag = false;
 8004dc2:	4b14      	ldr	r3, [pc, #80]	@ (8004e14 <send_state_via_uart+0x68>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	701a      	strb	r2, [r3, #0]

		payload[0] = (uint8_t)state.state;
 8004dc8:	7a3a      	ldrb	r2, [r7, #8]
 8004dca:	4b13      	ldr	r3, [pc, #76]	@ (8004e18 <send_state_via_uart+0x6c>)
 8004dcc:	701a      	strb	r2, [r3, #0]
		payload[1] = temperature;
 8004dce:	4a12      	ldr	r2, [pc, #72]	@ (8004e18 <send_state_via_uart+0x6c>)
 8004dd0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004dd4:	7053      	strb	r3, [r2, #1]
		payload[2] = control/10;
 8004dd6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004dd8:	4a10      	ldr	r2, [pc, #64]	@ (8004e1c <send_state_via_uart+0x70>)
 8004dda:	fba2 2303 	umull	r2, r3, r2, r3
 8004dde:	08db      	lsrs	r3, r3, #3
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	4b0c      	ldr	r3, [pc, #48]	@ (8004e18 <send_state_via_uart+0x6c>)
 8004de6:	709a      	strb	r2, [r3, #2]
		payload[3] = state.pid.setpoint;
 8004de8:	7b3a      	ldrb	r2, [r7, #12]
 8004dea:	4b0b      	ldr	r3, [pc, #44]	@ (8004e18 <send_state_via_uart+0x6c>)
 8004dec:	70da      	strb	r2, [r3, #3]
		payload[4] = periph_st;
 8004dee:	4a0a      	ldr	r2, [pc, #40]	@ (8004e18 <send_state_via_uart+0x6c>)
 8004df0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004df4:	7113      	strb	r3, [r2, #4]

		compose_data(payload, tx_buffer);
 8004df6:	490a      	ldr	r1, [pc, #40]	@ (8004e20 <send_state_via_uart+0x74>)
 8004df8:	4807      	ldr	r0, [pc, #28]	@ (8004e18 <send_state_via_uart+0x6c>)
 8004dfa:	f000 fbc9 	bl	8005590 <compose_data>

		hal_uart1_transmit_it(payload, TX_BUFF_LENGTH);
 8004dfe:	2109      	movs	r1, #9
 8004e00:	4805      	ldr	r0, [pc, #20]	@ (8004e18 <send_state_via_uart+0x6c>)
 8004e02:	f000 fb4f 	bl	80054a4 <hal_uart1_transmit_it>
	}
}
 8004e06:	bf00      	nop
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e0e:	b004      	add	sp, #16
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	2000003c 	.word	0x2000003c
 8004e18:	200001d4 	.word	0x200001d4
 8004e1c:	cccccccd 	.word	0xcccccccd
 8004e20:	200001c8 	.word	0x200001c8

08004e24 <app_peripheral_init>:

void app_peripheral_init()
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
	HAL_ADC_Init(&hadc1);
 8004e28:	480a      	ldr	r0, [pc, #40]	@ (8004e54 <app_peripheral_init+0x30>)
 8004e2a:	f7fc fb71 	bl	8001510 <HAL_ADC_Init>

	HAL_TIM_Base_Init(&htim1);
 8004e2e:	480a      	ldr	r0, [pc, #40]	@ (8004e58 <app_peripheral_init+0x34>)
 8004e30:	f7fd fefa 	bl	8002c28 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim2);
 8004e34:	4809      	ldr	r0, [pc, #36]	@ (8004e5c <app_peripheral_init+0x38>)
 8004e36:	f7fd fef7 	bl	8002c28 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim3);
 8004e3a:	4809      	ldr	r0, [pc, #36]	@ (8004e60 <app_peripheral_init+0x3c>)
 8004e3c:	f7fd fef4 	bl	8002c28 <HAL_TIM_Base_Init>

	HAL_TIM_Base_Start_IT(&htim2);
 8004e40:	4806      	ldr	r0, [pc, #24]	@ (8004e5c <app_peripheral_init+0x38>)
 8004e42:	f7fd ff41 	bl	8002cc8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8004e46:	4806      	ldr	r0, [pc, #24]	@ (8004e60 <app_peripheral_init+0x3c>)
 8004e48:	f7fd ff3e 	bl	8002cc8 <HAL_TIM_Base_Start_IT>

	hal_uart1_init();
 8004e4c:	f000 fb20 	bl	8005490 <hal_uart1_init>
}
 8004e50:	bf00      	nop
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	2000005c 	.word	0x2000005c
 8004e58:	200000a4 	.word	0x200000a4
 8004e5c:	200000ec 	.word	0x200000ec
 8004e60:	20000134 	.word	0x20000134

08004e64 <unpack_frame>:

void unpack_frame(sm_state_var_t *state)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
	uint8_t command = msg_raw[0];
 8004e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8004edc <unpack_frame+0x78>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	73fb      	strb	r3, [r7, #15]
	uint8_t sp = msg_raw[1];
 8004e72:	4b1a      	ldr	r3, [pc, #104]	@ (8004edc <unpack_frame+0x78>)
 8004e74:	785b      	ldrb	r3, [r3, #1]
 8004e76:	73bb      	strb	r3, [r7, #14]

	switch(command)
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d823      	bhi.n	8004ec6 <unpack_frame+0x62>
 8004e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e84 <unpack_frame+0x20>)
 8004e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e84:	08004e99 	.word	0x08004e99
 8004e88:	08004ea1 	.word	0x08004ea1
 8004e8c:	08004ea9 	.word	0x08004ea9
 8004e90:	08004eb1 	.word	0x08004eb1
 8004e94:	08004eb9 	.word	0x08004eb9
	{
		case 0:

			state->state = STATE_RESET;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	701a      	strb	r2, [r3, #0]
			break;
 8004e9e:	e017      	b.n	8004ed0 <unpack_frame+0x6c>

		case 1:

			state->state = STATE_IDLE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	701a      	strb	r2, [r3, #0]
			break;
 8004ea6:	e013      	b.n	8004ed0 <unpack_frame+0x6c>

		case 2:

			state->state = STATE_HEAT;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	701a      	strb	r2, [r3, #0]
			break;
 8004eae:	e00f      	b.n	8004ed0 <unpack_frame+0x6c>

		case 3:

			state->state = STATE_COOL;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	701a      	strb	r2, [r3, #0]
			break;
 8004eb6:	e00b      	b.n	8004ed0 <unpack_frame+0x6c>

		case 4:

			state->state = STATE_CONTROL;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2204      	movs	r2, #4
 8004ebc:	701a      	strb	r2, [r3, #0]
			st.pid.setpoint = sp;
 8004ebe:	4a08      	ldr	r2, [pc, #32]	@ (8004ee0 <unpack_frame+0x7c>)
 8004ec0:	7bbb      	ldrb	r3, [r7, #14]
 8004ec2:	7113      	strb	r3, [r2, #4]
			break;
 8004ec4:	e004      	b.n	8004ed0 <unpack_frame+0x6c>

		default:

			st.state = st.state;
 8004ec6:	4b06      	ldr	r3, [pc, #24]	@ (8004ee0 <unpack_frame+0x7c>)
 8004ec8:	781a      	ldrb	r2, [r3, #0]
 8004eca:	4b05      	ldr	r3, [pc, #20]	@ (8004ee0 <unpack_frame+0x7c>)
 8004ecc:	701a      	strb	r2, [r3, #0]

			break;
 8004ece:	bf00      	nop
	}

}
 8004ed0:	bf00      	nop
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	200001dc 	.word	0x200001dc
 8004ee0:	2000000c 	.word	0x2000000c

08004ee4 <app_sm_init>:

void app_sm_init()
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
	app_peripheral_init();
 8004ee8:	f7ff ff9c 	bl	8004e24 <app_peripheral_init>

	HAL_UART_Receive_IT(&huart1, msg_raw, 2);
 8004eec:	2202      	movs	r2, #2
 8004eee:	4903      	ldr	r1, [pc, #12]	@ (8004efc <app_sm_init+0x18>)
 8004ef0:	4803      	ldr	r0, [pc, #12]	@ (8004f00 <app_sm_init+0x1c>)
 8004ef2:	f7ff f841 	bl	8003f78 <HAL_UART_Receive_IT>
}
 8004ef6:	bf00      	nop
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	200001dc 	.word	0x200001dc
 8004f00:	2000017c 	.word	0x2000017c

08004f04 <app_sm_run>:

void app_sm_run(sm_state_var_t *st)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
	st->state = sm_state_table[st->state].func(st);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	461a      	mov	r2, r3
 8004f12:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <app_sm_run+0x28>)
 8004f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	4798      	blx	r3
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	461a      	mov	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	701a      	strb	r2, [r3, #0]
}
 8004f24:	bf00      	nop
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20000028 	.word	0x20000028

08004f30 <app_run>:

void app_run()
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
	app_sm_run(&st);
 8004f34:	4802      	ldr	r0, [pc, #8]	@ (8004f40 <app_run+0x10>)
 8004f36:	f7ff ffe5 	bl	8004f04 <app_sm_run>
}
 8004f3a:	bf00      	nop
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	2000000c 	.word	0x2000000c

08004f44 <sm_reset_state>:

sm_state_t sm_reset_state(sm_state_var_t *st)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
	sm_state_t next_state = STATE_IDLE;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	73fb      	strb	r3, [r7, #15]

	temperature = control_get_filtered_temp();
 8004f50:	f000 f9ce 	bl	80052f0 <control_get_filtered_temp>
 8004f54:	4603      	mov	r3, r0
 8004f56:	461a      	mov	r2, r3
 8004f58:	4b03      	ldr	r3, [pc, #12]	@ (8004f68 <sm_reset_state+0x24>)
 8004f5a:	701a      	strb	r2, [r3, #0]

	return next_state;
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	200001de 	.word	0x200001de

08004f6c <sm_idle_state>:


sm_state_t sm_idle_state(sm_state_var_t *st)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
	sm_state_t next_state = st->state;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	73fb      	strb	r3, [r7, #15]
	st->pid.setpoint = 0;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	711a      	strb	r2, [r3, #4]
	duty_cycle_cmd = 0;
 8004f80:	4b12      	ldr	r3, [pc, #72]	@ (8004fcc <sm_idle_state+0x60>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	801a      	strh	r2, [r3, #0]

	hw_load_turn_off_heat();
 8004f86:	f000 faad 	bl	80054e4 <hw_load_turn_off_heat>
	hw_fan_turn_off();
 8004f8a:	f000 fac5 	bl	8005518 <hw_fan_turn_off>

	fan_state = 0;
 8004f8e:	4b10      	ldr	r3, [pc, #64]	@ (8004fd0 <sm_idle_state+0x64>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	701a      	strb	r2, [r3, #0]
	heat_state = 0;
 8004f94:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd4 <sm_idle_state+0x68>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	701a      	strb	r2, [r3, #0]

	peripheral_state = (fan_state << 1) | heat_state;
 8004f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd0 <sm_idle_state+0x64>)
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	b25b      	sxtb	r3, r3
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	b25a      	sxtb	r2, r3
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd4 <sm_idle_state+0x68>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	b25b      	sxtb	r3, r3
 8004faa:	4313      	orrs	r3, r2
 8004fac:	b25b      	sxtb	r3, r3
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	4b09      	ldr	r3, [pc, #36]	@ (8004fd8 <sm_idle_state+0x6c>)
 8004fb2:	701a      	strb	r2, [r3, #0]

	temperature = control_get_filtered_temp();
 8004fb4:	f000 f99c 	bl	80052f0 <control_get_filtered_temp>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	461a      	mov	r2, r3
 8004fbc:	4b07      	ldr	r3, [pc, #28]	@ (8004fdc <sm_idle_state+0x70>)
 8004fbe:	701a      	strb	r2, [r3, #0]

	return next_state;
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	200001e0 	.word	0x200001e0
 8004fd0:	200001e2 	.word	0x200001e2
 8004fd4:	200001e3 	.word	0x200001e3
 8004fd8:	200001e4 	.word	0x200001e4
 8004fdc:	200001de 	.word	0x200001de

08004fe0 <sm_heat_state>:

sm_state_t sm_heat_state(sm_state_var_t *st)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	sm_state_t next_state = st->state;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	73fb      	strb	r3, [r7, #15]
	st->pid.setpoint = 0;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	711a      	strb	r2, [r3, #4]
	duty_cycle_cmd = 0;
 8004ff4:	4b15      	ldr	r3, [pc, #84]	@ (800504c <sm_heat_state+0x6c>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	801a      	strh	r2, [r3, #0]

	hw_load_turn_on_heat();
 8004ffa:	f000 fa67 	bl	80054cc <hw_load_turn_on_heat>
	hw_fan_turn_off();
 8004ffe:	f000 fa8b 	bl	8005518 <hw_fan_turn_off>

	fan_state = 0;
 8005002:	4b13      	ldr	r3, [pc, #76]	@ (8005050 <sm_heat_state+0x70>)
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]
	heat_state = 1;
 8005008:	4b12      	ldr	r3, [pc, #72]	@ (8005054 <sm_heat_state+0x74>)
 800500a:	2201      	movs	r2, #1
 800500c:	701a      	strb	r2, [r3, #0]

	peripheral_state = (fan_state << 1) | heat_state;
 800500e:	4b10      	ldr	r3, [pc, #64]	@ (8005050 <sm_heat_state+0x70>)
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	b25b      	sxtb	r3, r3
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	b25a      	sxtb	r2, r3
 8005018:	4b0e      	ldr	r3, [pc, #56]	@ (8005054 <sm_heat_state+0x74>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	b25b      	sxtb	r3, r3
 800501e:	4313      	orrs	r3, r2
 8005020:	b25b      	sxtb	r3, r3
 8005022:	b2da      	uxtb	r2, r3
 8005024:	4b0c      	ldr	r3, [pc, #48]	@ (8005058 <sm_heat_state+0x78>)
 8005026:	701a      	strb	r2, [r3, #0]

	temperature = control_get_filtered_temp();
 8005028:	f000 f962 	bl	80052f0 <control_get_filtered_temp>
 800502c:	4603      	mov	r3, r0
 800502e:	461a      	mov	r2, r3
 8005030:	4b0a      	ldr	r3, [pc, #40]	@ (800505c <sm_heat_state+0x7c>)
 8005032:	701a      	strb	r2, [r3, #0]

	if(temperature > MAX_OPERATIONAL_TEMP)
 8005034:	4b09      	ldr	r3, [pc, #36]	@ (800505c <sm_heat_state+0x7c>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b4b      	cmp	r3, #75	@ 0x4b
 800503a:	d901      	bls.n	8005040 <sm_heat_state+0x60>
		 next_state = STATE_COOL;
 800503c:	2303      	movs	r3, #3
 800503e:	73fb      	strb	r3, [r7, #15]

	return next_state;
 8005040:	7bfb      	ldrb	r3, [r7, #15]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	200001e0 	.word	0x200001e0
 8005050:	200001e2 	.word	0x200001e2
 8005054:	200001e3 	.word	0x200001e3
 8005058:	200001e4 	.word	0x200001e4
 800505c:	200001de 	.word	0x200001de

08005060 <sm_cool_state>:

sm_state_t sm_cool_state(sm_state_var_t *st)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
	sm_state_t next_state = st->state;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	73fb      	strb	r3, [r7, #15]
	st->pid.setpoint = 0;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	711a      	strb	r2, [r3, #4]
	duty_cycle_cmd = 1000;
 8005074:	4b15      	ldr	r3, [pc, #84]	@ (80050cc <sm_cool_state+0x6c>)
 8005076:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800507a:	801a      	strh	r2, [r3, #0]

	hw_fan_turn_on();
 800507c:	f000 fa3e 	bl	80054fc <hw_fan_turn_on>
	hw_load_turn_off_heat();
 8005080:	f000 fa30 	bl	80054e4 <hw_load_turn_off_heat>

	fan_state = 1;
 8005084:	4b12      	ldr	r3, [pc, #72]	@ (80050d0 <sm_cool_state+0x70>)
 8005086:	2201      	movs	r2, #1
 8005088:	701a      	strb	r2, [r3, #0]
	heat_state = 0;
 800508a:	4b12      	ldr	r3, [pc, #72]	@ (80050d4 <sm_cool_state+0x74>)
 800508c:	2200      	movs	r2, #0
 800508e:	701a      	strb	r2, [r3, #0]

	peripheral_state = (fan_state << 1) | heat_state;
 8005090:	4b0f      	ldr	r3, [pc, #60]	@ (80050d0 <sm_cool_state+0x70>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	b25b      	sxtb	r3, r3
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	b25a      	sxtb	r2, r3
 800509a:	4b0e      	ldr	r3, [pc, #56]	@ (80050d4 <sm_cool_state+0x74>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	b25b      	sxtb	r3, r3
 80050a0:	4313      	orrs	r3, r2
 80050a2:	b25b      	sxtb	r3, r3
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	4b0c      	ldr	r3, [pc, #48]	@ (80050d8 <sm_cool_state+0x78>)
 80050a8:	701a      	strb	r2, [r3, #0]

	temperature = control_get_filtered_temp();
 80050aa:	f000 f921 	bl	80052f0 <control_get_filtered_temp>
 80050ae:	4603      	mov	r3, r0
 80050b0:	461a      	mov	r2, r3
 80050b2:	4b0a      	ldr	r3, [pc, #40]	@ (80050dc <sm_cool_state+0x7c>)
 80050b4:	701a      	strb	r2, [r3, #0]

	if(temperature < AMBIENT_TEMP)
 80050b6:	4b09      	ldr	r3, [pc, #36]	@ (80050dc <sm_cool_state+0x7c>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b18      	cmp	r3, #24
 80050bc:	d801      	bhi.n	80050c2 <sm_cool_state+0x62>
		next_state = STATE_IDLE;
 80050be:	2301      	movs	r3, #1
 80050c0:	73fb      	strb	r3, [r7, #15]

	return next_state;
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	200001e0 	.word	0x200001e0
 80050d0:	200001e2 	.word	0x200001e2
 80050d4:	200001e3 	.word	0x200001e3
 80050d8:	200001e4 	.word	0x200001e4
 80050dc:	200001de 	.word	0x200001de

080050e0 <sm_control_state>:

sm_state_t sm_control_state(sm_state_var_t *st)
{
 80050e0:	b590      	push	{r4, r7, lr}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	6078      	str	r0, [r7, #4]
	sm_state_t next_state = st->state;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	73fb      	strb	r3, [r7, #15]

	duty_cycle_cmd = 0;
 80050ee:	4b2b      	ldr	r3, [pc, #172]	@ (800519c <sm_control_state+0xbc>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	801a      	strh	r2, [r3, #0]

	if(st->pid.setpoint > MAX_OPERATIONAL_TEMP)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	791b      	ldrb	r3, [r3, #4]
 80050f8:	2b4b      	cmp	r3, #75	@ 0x4b
 80050fa:	d902      	bls.n	8005102 <sm_control_state+0x22>
		st->pid.setpoint = MAX_OPERATIONAL_TEMP;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	224b      	movs	r2, #75	@ 0x4b
 8005100:	711a      	strb	r2, [r3, #4]

	if(st->pid.setpoint < AMBIENT_TEMP)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	791b      	ldrb	r3, [r3, #4]
 8005106:	2b18      	cmp	r3, #24
 8005108:	d802      	bhi.n	8005110 <sm_control_state+0x30>
		st->pid.setpoint = AMBIENT_TEMP;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2219      	movs	r2, #25
 800510e:	711a      	strb	r2, [r3, #4]

	hw_load_turn_on_heat();
 8005110:	f000 f9dc 	bl	80054cc <hw_load_turn_on_heat>
	temperature = control_get_filtered_temp();
 8005114:	f000 f8ec 	bl	80052f0 <control_get_filtered_temp>
 8005118:	4603      	mov	r3, r0
 800511a:	461a      	mov	r2, r3
 800511c:	4b20      	ldr	r3, [pc, #128]	@ (80051a0 <sm_control_state+0xc0>)
 800511e:	701a      	strb	r2, [r3, #0]

	duty_cycle_cmd = control_get_pid(st->pid, st->pid.setpoint, temperature);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	791b      	ldrb	r3, [r3, #4]
 8005124:	ee07 3a90 	vmov	s15, r3
 8005128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512c:	4b1c      	ldr	r3, [pc, #112]	@ (80051a0 <sm_control_state+0xc0>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	ee07 3a10 	vmov	s14, r3
 8005134:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	466c      	mov	r4, sp
 800513c:	f103 0214 	add.w	r2, r3, #20
 8005140:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005144:	e884 0003 	stmia.w	r4, {r0, r1}
 8005148:	3304      	adds	r3, #4
 800514a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800514c:	eef0 0a47 	vmov.f32	s1, s14
 8005150:	eeb0 0a67 	vmov.f32	s0, s15
 8005154:	f000 f906 	bl	8005364 <control_get_pid>
 8005158:	4603      	mov	r3, r0
 800515a:	461a      	mov	r2, r3
 800515c:	4b0f      	ldr	r3, [pc, #60]	@ (800519c <sm_control_state+0xbc>)
 800515e:	801a      	strh	r2, [r3, #0]
	hw_fan_speed_control(duty_cycle_cmd);
 8005160:	4b0e      	ldr	r3, [pc, #56]	@ (800519c <sm_control_state+0xbc>)
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	4618      	mov	r0, r3
 8005166:	f000 f9e5 	bl	8005534 <hw_fan_speed_control>

	fan_state = 1;
 800516a:	4b0e      	ldr	r3, [pc, #56]	@ (80051a4 <sm_control_state+0xc4>)
 800516c:	2201      	movs	r2, #1
 800516e:	701a      	strb	r2, [r3, #0]
	heat_state = 1;
 8005170:	4b0d      	ldr	r3, [pc, #52]	@ (80051a8 <sm_control_state+0xc8>)
 8005172:	2201      	movs	r2, #1
 8005174:	701a      	strb	r2, [r3, #0]

	peripheral_state = (fan_state << 1) | heat_state;
 8005176:	4b0b      	ldr	r3, [pc, #44]	@ (80051a4 <sm_control_state+0xc4>)
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	b25b      	sxtb	r3, r3
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	b25a      	sxtb	r2, r3
 8005180:	4b09      	ldr	r3, [pc, #36]	@ (80051a8 <sm_control_state+0xc8>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	b25b      	sxtb	r3, r3
 8005186:	4313      	orrs	r3, r2
 8005188:	b25b      	sxtb	r3, r3
 800518a:	b2da      	uxtb	r2, r3
 800518c:	4b07      	ldr	r3, [pc, #28]	@ (80051ac <sm_control_state+0xcc>)
 800518e:	701a      	strb	r2, [r3, #0]

	return next_state;
 8005190:	7bfb      	ldrb	r3, [r7, #15]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	bd90      	pop	{r4, r7, pc}
 800519a:	bf00      	nop
 800519c:	200001e0 	.word	0x200001e0
 80051a0:	200001de 	.word	0x200001de
 80051a4:	200001e2 	.word	0x200001e2
 80051a8:	200001e3 	.word	0x200001e3
 80051ac:	200001e4 	.word	0x200001e4

080051b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a07      	ldr	r2, [pc, #28]	@ (80051d8 <HAL_UART_RxCpltCallback+0x28>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d107      	bne.n	80051d0 <HAL_UART_RxCpltCallback+0x20>
	{
		unpack_frame(&st);
 80051c0:	4806      	ldr	r0, [pc, #24]	@ (80051dc <HAL_UART_RxCpltCallback+0x2c>)
 80051c2:	f7ff fe4f 	bl	8004e64 <unpack_frame>
		HAL_UART_Receive_IT(&huart1, msg_raw, 2);
 80051c6:	2202      	movs	r2, #2
 80051c8:	4905      	ldr	r1, [pc, #20]	@ (80051e0 <HAL_UART_RxCpltCallback+0x30>)
 80051ca:	4803      	ldr	r0, [pc, #12]	@ (80051d8 <HAL_UART_RxCpltCallback+0x28>)
 80051cc:	f7fe fed4 	bl	8003f78 <HAL_UART_Receive_IT>
	}
}
 80051d0:	bf00      	nop
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	2000017c 	.word	0x2000017c
 80051dc:	2000000c 	.word	0x2000000c
 80051e0:	200001dc 	.word	0x200001dc

080051e4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a06      	ldr	r2, [pc, #24]	@ (8005208 <HAL_UART_TxCpltCallback+0x24>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d102      	bne.n	80051fa <HAL_UART_TxCpltCallback+0x16>
	{
		transmit_flag = true;
 80051f4:	4b05      	ldr	r3, [pc, #20]	@ (800520c <HAL_UART_TxCpltCallback+0x28>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	701a      	strb	r2, [r3, #0]
	}
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	2000017c 	.word	0x2000017c
 800520c:	2000003c 	.word	0x2000003c

08005210 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8005210:	b590      	push	{r4, r7, lr}
 8005212:	b089      	sub	sp, #36	@ 0x24
 8005214:	af06      	add	r7, sp, #24
 8005216:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a10      	ldr	r2, [pc, #64]	@ (800525c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d101      	bne.n	8005224 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		app_run();
 8005220:	f7ff fe86 	bl	8004f30 <app_run>
	}

	if(htim == &htim3)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a0e      	ldr	r2, [pc, #56]	@ (8005260 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d112      	bne.n	8005252 <HAL_TIM_PeriodElapsedCallback+0x42>
	{
		send_state_via_uart(st, temperature, duty_cycle_cmd, peripheral_state);
 800522c:	4b0d      	ldr	r3, [pc, #52]	@ (8005264 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800522e:	781a      	ldrb	r2, [r3, #0]
 8005230:	4b0d      	ldr	r3, [pc, #52]	@ (8005268 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8005232:	8819      	ldrh	r1, [r3, #0]
 8005234:	4b0d      	ldr	r3, [pc, #52]	@ (800526c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8005236:	7818      	ldrb	r0, [r3, #0]
 8005238:	4b0d      	ldr	r3, [pc, #52]	@ (8005270 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800523a:	9005      	str	r0, [sp, #20]
 800523c:	9104      	str	r1, [sp, #16]
 800523e:	9203      	str	r2, [sp, #12]
 8005240:	466c      	mov	r4, sp
 8005242:	f103 0210 	add.w	r2, r3, #16
 8005246:	ca07      	ldmia	r2, {r0, r1, r2}
 8005248:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800524c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800524e:	f7ff fdad 	bl	8004dac <send_state_via_uart>
	}
}
 8005252:	bf00      	nop
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	bd90      	pop	{r4, r7, pc}
 800525a:	bf00      	nop
 800525c:	200000ec 	.word	0x200000ec
 8005260:	20000134 	.word	0x20000134
 8005264:	200001de 	.word	0x200001de
 8005268:	200001e0 	.word	0x200001e0
 800526c:	200001e4 	.word	0x200001e4
 8005270:	2000000c 	.word	0x2000000c

08005274 <checksum>:

#include <stdint.h>
#include "checksum.h"

uint8_t checksum(uint8_t *p_buf, uint8_t length)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	70fb      	strb	r3, [r7, #3]
	uint8_t idx = 0;
 8005280:	2300      	movs	r3, #0
 8005282:	73fb      	strb	r3, [r7, #15]
	uint8_t chk_sum = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	73bb      	strb	r3, [r7, #14]

	for(idx = 0;idx < length;idx++)
 8005288:	2300      	movs	r3, #0
 800528a:	73fb      	strb	r3, [r7, #15]
 800528c:	e00a      	b.n	80052a4 <checksum+0x30>
	{
		chk_sum += (*p_buf);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	781a      	ldrb	r2, [r3, #0]
 8005292:	7bbb      	ldrb	r3, [r7, #14]
 8005294:	4413      	add	r3, r2
 8005296:	73bb      	strb	r3, [r7, #14]
		p_buf++;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3301      	adds	r3, #1
 800529c:	607b      	str	r3, [r7, #4]
	for(idx = 0;idx < length;idx++)
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	3301      	adds	r3, #1
 80052a2:	73fb      	strb	r3, [r7, #15]
 80052a4:	7bfa      	ldrb	r2, [r7, #15]
 80052a6:	78fb      	ldrb	r3, [r7, #3]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d3f0      	bcc.n	800528e <checksum+0x1a>
	}

	return chk_sum;
 80052ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <control_get_read_adc>:

float error, error_1, error_2;
float control, control_1, control_2;

uint32_t control_get_read_adc()
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80052c2:	4809      	ldr	r0, [pc, #36]	@ (80052e8 <control_get_read_adc+0x2c>)
 80052c4:	f7fc f968 	bl	8001598 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80052c8:	2164      	movs	r1, #100	@ 0x64
 80052ca:	4807      	ldr	r0, [pc, #28]	@ (80052e8 <control_get_read_adc+0x2c>)
 80052cc:	f7fc fa4b 	bl	8001766 <HAL_ADC_PollForConversion>
	uint32_t adc_raw = HAL_ADC_GetValue(&hadc1);
 80052d0:	4805      	ldr	r0, [pc, #20]	@ (80052e8 <control_get_read_adc+0x2c>)
 80052d2:	f7fc fad3 	bl	800187c <HAL_ADC_GetValue>
 80052d6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 80052d8:	4803      	ldr	r0, [pc, #12]	@ (80052e8 <control_get_read_adc+0x2c>)
 80052da:	f7fc fa11 	bl	8001700 <HAL_ADC_Stop>

	return(adc_raw);
 80052de:	687b      	ldr	r3, [r7, #4]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	2000005c 	.word	0x2000005c
 80052ec:	00000000 	.word	0x00000000

080052f0 <control_get_filtered_temp>:

uint8_t control_get_filtered_temp()
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
	uint32_t adc_reading = control_get_read_adc();
 80052f6:	f7ff ffe1 	bl	80052bc <control_get_read_adc>
 80052fa:	60f8      	str	r0, [r7, #12]

	float voltage = (OPERATIONAL_VOLTAGE / ADC_MAX_VALUE) * adc_reading;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005306:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8005360 <control_get_filtered_temp+0x70>
 800530a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800530e:	edc7 7a02 	vstr	s15, [r7, #8]
	uint8_t temperature = (uint8_t)(-101.099 * voltage + 347.473);
 8005312:	68b8      	ldr	r0, [r7, #8]
 8005314:	f7fb f9ee 	bl	80006f4 <__aeabi_f2d>
 8005318:	a30d      	add	r3, pc, #52	@ (adr r3, 8005350 <control_get_filtered_temp+0x60>)
 800531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531e:	f7fa ff5b 	bl	80001d8 <__aeabi_dmul>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4610      	mov	r0, r2
 8005328:	4619      	mov	r1, r3
 800532a:	a30b      	add	r3, pc, #44	@ (adr r3, 8005358 <control_get_filtered_temp+0x68>)
 800532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005330:	f7fb f882 	bl	8000438 <__adddf3>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4610      	mov	r0, r2
 800533a:	4619      	mov	r1, r3
 800533c:	f7fb fa32 	bl	80007a4 <__aeabi_d2uiz>
 8005340:	4603      	mov	r3, r0
 8005342:	71fb      	strb	r3, [r7, #7]

	return temperature;
 8005344:	79fb      	ldrb	r3, [r7, #7]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	04189375 	.word	0x04189375
 8005354:	c0594656 	.word	0xc0594656
 8005358:	6872b021 	.word	0x6872b021
 800535c:	4075b791 	.word	0x4075b791
 8005360:	3a534067 	.word	0x3a534067

08005364 <control_get_pid>:

uint16_t control_get_pid(control_pid_t pid, float reference, float current_temp)
{
 8005364:	b084      	sub	sp, #16
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	f107 0c10 	add.w	ip, r7, #16
 8005370:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8005374:	ed87 0a01 	vstr	s0, [r7, #4]
 8005378:	edc7 0a00 	vstr	s1, [r7]
	error = reference - current_temp;
 800537c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005380:	edd7 7a00 	vldr	s15, [r7]
 8005384:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005388:	4b39      	ldr	r3, [pc, #228]	@ (8005470 <control_get_pid+0x10c>)
 800538a:	edc3 7a00 	vstr	s15, [r3]

	control = (uint16_t)(-pid.a1 * control_1 - pid.a2 * control_2 + pid.b0 * error + pid.b1 * error_1 + pid.b2 * error_2);
 800538e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005392:	eeb1 7a67 	vneg.f32	s14, s15
 8005396:	4b37      	ldr	r3, [pc, #220]	@ (8005474 <control_get_pid+0x110>)
 8005398:	edd3 7a00 	vldr	s15, [r3]
 800539c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053a0:	edd7 6a06 	vldr	s13, [r7, #24]
 80053a4:	4b34      	ldr	r3, [pc, #208]	@ (8005478 <control_get_pid+0x114>)
 80053a6:	edd3 7a00 	vldr	s15, [r3]
 80053aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80053b6:	4b2e      	ldr	r3, [pc, #184]	@ (8005470 <control_get_pid+0x10c>)
 80053b8:	edd3 7a00 	vldr	s15, [r3]
 80053bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053c4:	edd7 6a08 	vldr	s13, [r7, #32]
 80053c8:	4b2c      	ldr	r3, [pc, #176]	@ (800547c <control_get_pid+0x118>)
 80053ca:	edd3 7a00 	vldr	s15, [r3]
 80053ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053d6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80053da:	4b29      	ldr	r3, [pc, #164]	@ (8005480 <control_get_pid+0x11c>)
 80053dc:	edd3 7a00 	vldr	s15, [r3]
 80053e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053ec:	ee17 3a90 	vmov	r3, s15
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	ee07 3a90 	vmov	s15, r3
 80053f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fa:	4b22      	ldr	r3, [pc, #136]	@ (8005484 <control_get_pid+0x120>)
 80053fc:	edc3 7a00 	vstr	s15, [r3]

	if(control >= 999)
 8005400:	4b20      	ldr	r3, [pc, #128]	@ (8005484 <control_get_pid+0x120>)
 8005402:	edd3 7a00 	vldr	s15, [r3]
 8005406:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8005488 <control_get_pid+0x124>
 800540a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800540e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005412:	db02      	blt.n	800541a <control_get_pid+0xb6>
		control = 999;
 8005414:	4b1b      	ldr	r3, [pc, #108]	@ (8005484 <control_get_pid+0x120>)
 8005416:	4a1d      	ldr	r2, [pc, #116]	@ (800548c <control_get_pid+0x128>)
 8005418:	601a      	str	r2, [r3, #0]

	if(control <= 0)
 800541a:	4b1a      	ldr	r3, [pc, #104]	@ (8005484 <control_get_pid+0x120>)
 800541c:	edd3 7a00 	vldr	s15, [r3]
 8005420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005428:	d803      	bhi.n	8005432 <control_get_pid+0xce>
		control = 0;
 800542a:	4b16      	ldr	r3, [pc, #88]	@ (8005484 <control_get_pid+0x120>)
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	601a      	str	r2, [r3, #0]

	error_2 = error_1;
 8005432:	4b12      	ldr	r3, [pc, #72]	@ (800547c <control_get_pid+0x118>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a12      	ldr	r2, [pc, #72]	@ (8005480 <control_get_pid+0x11c>)
 8005438:	6013      	str	r3, [r2, #0]
	error_1 = error;
 800543a:	4b0d      	ldr	r3, [pc, #52]	@ (8005470 <control_get_pid+0x10c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a0f      	ldr	r2, [pc, #60]	@ (800547c <control_get_pid+0x118>)
 8005440:	6013      	str	r3, [r2, #0]
	control_2 = control_1;
 8005442:	4b0c      	ldr	r3, [pc, #48]	@ (8005474 <control_get_pid+0x110>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a0c      	ldr	r2, [pc, #48]	@ (8005478 <control_get_pid+0x114>)
 8005448:	6013      	str	r3, [r2, #0]
	control_1 = control;
 800544a:	4b0e      	ldr	r3, [pc, #56]	@ (8005484 <control_get_pid+0x120>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a09      	ldr	r2, [pc, #36]	@ (8005474 <control_get_pid+0x110>)
 8005450:	6013      	str	r3, [r2, #0]

	return control;
 8005452:	4b0c      	ldr	r3, [pc, #48]	@ (8005484 <control_get_pid+0x120>)
 8005454:	edd3 7a00 	vldr	s15, [r3]
 8005458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800545c:	ee17 3a90 	vmov	r3, s15
 8005460:	b29b      	uxth	r3, r3
}
 8005462:	4618      	mov	r0, r3
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	b004      	add	sp, #16
 800546e:	4770      	bx	lr
 8005470:	200001e8 	.word	0x200001e8
 8005474:	200001f8 	.word	0x200001f8
 8005478:	200001fc 	.word	0x200001fc
 800547c:	200001ec 	.word	0x200001ec
 8005480:	200001f0 	.word	0x200001f0
 8005484:	200001f4 	.word	0x200001f4
 8005488:	4479c000 	.word	0x4479c000
 800548c:	4479c000 	.word	0x4479c000

08005490 <hal_uart1_init>:
#include "main.h"

extern UART_HandleTypeDef huart1;

void hal_uart1_init()
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
	HAL_UART_Init(&huart1);
 8005494:	4802      	ldr	r0, [pc, #8]	@ (80054a0 <hal_uart1_init+0x10>)
 8005496:	f7fe fce9 	bl	8003e6c <HAL_UART_Init>
}
 800549a:	bf00      	nop
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	2000017c 	.word	0x2000017c

080054a4 <hal_uart1_transmit_it>:

	hal_uart1_init();
}

void hal_uart1_transmit_it(uint8_t *p_buf, uint8_t length)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	460b      	mov	r3, r1
 80054ae:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit_IT(&huart1, p_buf, length);
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	4803      	ldr	r0, [pc, #12]	@ (80054c8 <hal_uart1_transmit_it+0x24>)
 80054ba:	f7fe fd27 	bl	8003f0c <HAL_UART_Transmit_IT>
}
 80054be:	bf00      	nop
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	2000017c 	.word	0x2000017c

080054cc <hw_load_turn_on_heat>:
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;
extern UART_HandleTypeDef huart1;

void hw_load_turn_on_heat(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PWM_LOAD_GPIO_Port, PWM_LOAD_Pin, GPIO_PIN_SET);
 80054d0:	2201      	movs	r2, #1
 80054d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80054d6:	4802      	ldr	r0, [pc, #8]	@ (80054e0 <hw_load_turn_on_heat+0x14>)
 80054d8:	f7fc ff34 	bl	8002344 <HAL_GPIO_WritePin>
}
 80054dc:	bf00      	nop
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40020000 	.word	0x40020000

080054e4 <hw_load_turn_off_heat>:

void hw_load_turn_off_heat(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PWM_LOAD_GPIO_Port, PWM_LOAD_Pin, GPIO_PIN_RESET);
 80054e8:	2200      	movs	r2, #0
 80054ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80054ee:	4802      	ldr	r0, [pc, #8]	@ (80054f8 <hw_load_turn_off_heat+0x14>)
 80054f0:	f7fc ff28 	bl	8002344 <HAL_GPIO_WritePin>
}
 80054f4:	bf00      	nop
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	40020000 	.word	0x40020000

080054fc <hw_fan_turn_on>:

void hw_fan_turn_on(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8005500:	2100      	movs	r1, #0
 8005502:	4804      	ldr	r0, [pc, #16]	@ (8005514 <hw_fan_turn_on+0x18>)
 8005504:	f7fd fcf4 	bl	8002ef0 <HAL_TIM_PWM_Start>
	hw_fan_speed_control(999);
 8005508:	f240 30e7 	movw	r0, #999	@ 0x3e7
 800550c:	f000 f812 	bl	8005534 <hw_fan_speed_control>
}
 8005510:	bf00      	nop
 8005512:	bd80      	pop	{r7, pc}
 8005514:	200000a4 	.word	0x200000a4

08005518 <hw_fan_turn_off>:

void hw_fan_turn_off(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
	hw_fan_speed_control(0);
 800551c:	2000      	movs	r0, #0
 800551e:	f000 f809 	bl	8005534 <hw_fan_speed_control>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8005522:	2100      	movs	r1, #0
 8005524:	4802      	ldr	r0, [pc, #8]	@ (8005530 <hw_fan_turn_off+0x18>)
 8005526:	f7fd fd93 	bl	8003050 <HAL_TIM_PWM_Stop>
}
 800552a:	bf00      	nop
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	200000a4 	.word	0x200000a4

08005534 <hw_fan_speed_control>:

void hw_fan_speed_control(uint16_t duty_cycle)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	4603      	mov	r3, r0
 800553c:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800553e:	2100      	movs	r1, #0
 8005540:	4805      	ldr	r0, [pc, #20]	@ (8005558 <hw_fan_speed_control+0x24>)
 8005542:	f7fd fcd5 	bl	8002ef0 <HAL_TIM_PWM_Start>
	hw_pwm_set_dc(duty_cycle);
 8005546:	88fb      	ldrh	r3, [r7, #6]
 8005548:	4618      	mov	r0, r3
 800554a:	f000 f807 	bl	800555c <hw_pwm_set_dc>
}
 800554e:	bf00      	nop
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	200000a4 	.word	0x200000a4

0800555c <hw_pwm_set_dc>:

void hw_pwm_set_dc(uint16_t duty_cycle)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	4603      	mov	r3, r0
 8005564:	80fb      	strh	r3, [r7, #6]
	uint16_t aux = duty_cycle;
 8005566:	88fb      	ldrh	r3, [r7, #6]
 8005568:	81fb      	strh	r3, [r7, #14]
	if(aux > 999)
 800556a:	89fb      	ldrh	r3, [r7, #14]
 800556c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005570:	d302      	bcc.n	8005578 <hw_pwm_set_dc+0x1c>
		aux = 999;
 8005572:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8005576:	81fb      	strh	r3, [r7, #14]

	if(aux < 0)
		aux = 0.;

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, aux);
 8005578:	4b04      	ldr	r3, [pc, #16]	@ (800558c <hw_pwm_set_dc+0x30>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	89fa      	ldrh	r2, [r7, #14]
 800557e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8005580:	bf00      	nop
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	200000a4 	.word	0x200000a4

08005590 <compose_data>:
#include <string.h>
#include "payload_composer.h"
#include "checksum.h"

void compose_data(uint8_t *payload, uint8_t *tx_buffer)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
	uint8_t chk_sum = checksum(payload, PAYLOAD_LENGTH);
 800559a:	2105      	movs	r1, #5
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7ff fe69 	bl	8005274 <checksum>
 80055a2:	4603      	mov	r3, r0
 80055a4:	73fb      	strb	r3, [r7, #15]

	tx_buffer[0] = START_BYTE;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	227e      	movs	r2, #126	@ 0x7e
 80055aa:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = PAYLOAD_LENGTH;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	3301      	adds	r3, #1
 80055b0:	2205      	movs	r2, #5
 80055b2:	701a      	strb	r2, [r3, #0]
	memcpy(&tx_buffer[2], payload, PAYLOAD_LENGTH);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	3302      	adds	r3, #2
 80055b8:	2205      	movs	r2, #5
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 f839 	bl	8005634 <memcpy>
	tx_buffer[6] = chk_sum;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	3306      	adds	r3, #6
 80055c6:	7bfa      	ldrb	r2, [r7, #15]
 80055c8:	701a      	strb	r2, [r3, #0]
	tx_buffer[7] = STOP_BYTE;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	3307      	adds	r3, #7
 80055ce:	227f      	movs	r2, #127	@ 0x7f
 80055d0:	701a      	strb	r2, [r3, #0]
}
 80055d2:	bf00      	nop
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <memset>:
 80055da:	4402      	add	r2, r0
 80055dc:	4603      	mov	r3, r0
 80055de:	4293      	cmp	r3, r2
 80055e0:	d100      	bne.n	80055e4 <memset+0xa>
 80055e2:	4770      	bx	lr
 80055e4:	f803 1b01 	strb.w	r1, [r3], #1
 80055e8:	e7f9      	b.n	80055de <memset+0x4>
	...

080055ec <__libc_init_array>:
 80055ec:	b570      	push	{r4, r5, r6, lr}
 80055ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005624 <__libc_init_array+0x38>)
 80055f0:	4c0d      	ldr	r4, [pc, #52]	@ (8005628 <__libc_init_array+0x3c>)
 80055f2:	1b64      	subs	r4, r4, r5
 80055f4:	10a4      	asrs	r4, r4, #2
 80055f6:	2600      	movs	r6, #0
 80055f8:	42a6      	cmp	r6, r4
 80055fa:	d109      	bne.n	8005610 <__libc_init_array+0x24>
 80055fc:	4d0b      	ldr	r5, [pc, #44]	@ (800562c <__libc_init_array+0x40>)
 80055fe:	4c0c      	ldr	r4, [pc, #48]	@ (8005630 <__libc_init_array+0x44>)
 8005600:	f000 f826 	bl	8005650 <_init>
 8005604:	1b64      	subs	r4, r4, r5
 8005606:	10a4      	asrs	r4, r4, #2
 8005608:	2600      	movs	r6, #0
 800560a:	42a6      	cmp	r6, r4
 800560c:	d105      	bne.n	800561a <__libc_init_array+0x2e>
 800560e:	bd70      	pop	{r4, r5, r6, pc}
 8005610:	f855 3b04 	ldr.w	r3, [r5], #4
 8005614:	4798      	blx	r3
 8005616:	3601      	adds	r6, #1
 8005618:	e7ee      	b.n	80055f8 <__libc_init_array+0xc>
 800561a:	f855 3b04 	ldr.w	r3, [r5], #4
 800561e:	4798      	blx	r3
 8005620:	3601      	adds	r6, #1
 8005622:	e7f2      	b.n	800560a <__libc_init_array+0x1e>
 8005624:	08005688 	.word	0x08005688
 8005628:	08005688 	.word	0x08005688
 800562c:	08005688 	.word	0x08005688
 8005630:	0800568c 	.word	0x0800568c

08005634 <memcpy>:
 8005634:	440a      	add	r2, r1
 8005636:	4291      	cmp	r1, r2
 8005638:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800563c:	d100      	bne.n	8005640 <memcpy+0xc>
 800563e:	4770      	bx	lr
 8005640:	b510      	push	{r4, lr}
 8005642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800564a:	4291      	cmp	r1, r2
 800564c:	d1f9      	bne.n	8005642 <memcpy+0xe>
 800564e:	bd10      	pop	{r4, pc}

08005650 <_init>:
 8005650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005652:	bf00      	nop
 8005654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005656:	bc08      	pop	{r3}
 8005658:	469e      	mov	lr, r3
 800565a:	4770      	bx	lr

0800565c <_fini>:
 800565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565e:	bf00      	nop
 8005660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005662:	bc08      	pop	{r3}
 8005664:	469e      	mov	lr, r3
 8005666:	4770      	bx	lr
